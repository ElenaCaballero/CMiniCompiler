
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 21 10:23:52 CST 2017
//----------------------------------------------------

package cminicompiler;

import java_cup.runtime.*;
import classes.*;
import java.util.ArrayList;
import java.lang.reflect.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 21 10:23:52 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\012\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\005\004\000\002\005\003\000\002" +
    "\006\012\000\002\006\012\000\002\006\012\000\002\006" +
    "\012\000\002\006\012\000\002\010\005\000\002\010\003" +
    "\000\002\010\002\000\002\007\004\000\002\007\004\000" +
    "\002\012\004\000\002\012\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\015\005\000\002\015\004\000" +
    "\002\022\005\000\002\022\003\000\002\021\004\000\002" +
    "\021\004\000\002\040\004\000\002\040\002\000\002\037" +
    "\003\000\002\037\004\000\002\034\005\000\002\034\003" +
    "\000\002\035\005\000\002\035\005\000\002\035\003\000" +
    "\002\036\005\000\002\036\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\024\011\000\002\024\004\000\002\024\011\000" +
    "\002\024\011\000\002\024\011\000\002\024\011\000\002" +
    "\024\011\000\002\025\006\000\002\025\004\000\002\025" +
    "\006\000\002\025\006\000\002\026\005\000\002\026\006" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\042\003\000\002\033\004\000\002\033\004\000\002" +
    "\027\011\000\002\027\011\000\002\027\011\000\002\027" +
    "\011\000\002\027\011\000\002\030\015\000\002\030\015" +
    "\000\002\030\015\000\002\030\015\000\002\030\015\000" +
    "\002\031\006\000\002\031\006\000\002\031\006\000\002" +
    "\032\005\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\017\011\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\020\007\000\002\020\011\000" +
    "\002\020\007\000\002\020\007\000\002\020\007\000\002" +
    "\020\011\000\002\020\011\000\002\020\011\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\014\003\013\004\004\005\014\006\006\010" +
    "\007\001\002\000\026\003\uff97\007\uff97\020\uff97\035\uff97" +
    "\036\uff97\037\uff97\042\uff97\043\uff97\044\uff97\045\u012c\001" +
    "\002\000\004\002\000\001\002\000\024\003\uff93\007\uff93" +
    "\020\uff93\035\uff93\036\uff93\037\uff93\042\uff93\043\uff93\044" +
    "\uff93\001\002\000\024\003\uff92\007\uff92\020\uff92\035\uff92" +
    "\036\uff92\037\uff92\042\uff92\043\uff92\044\uff92\001\002\000" +
    "\012\004\004\005\014\006\006\010\007\001\002\000\004" +
    "\002\u0105\001\002\000\010\003\033\037\032\043\034\001" +
    "\002\000\016\003\013\004\004\005\014\006\006\010\007" +
    "\037\017\001\002\000\026\003\uff96\007\uff96\020\uff96\035" +
    "\uff96\036\uff96\037\uff96\042\uff96\043\uff96\044\uff96\045\015" +
    "\001\002\000\024\003\uff94\007\uff94\020\uff94\035\uff94\036" +
    "\uff94\037\uff94\042\uff94\043\uff94\044\uff94\001\002\000\004" +
    "\002\ufffe\001\002\000\004\020\020\001\002\000\014\004" +
    "\004\005\014\006\006\010\007\021\uffee\001\002\000\004" +
    "\021\030\001\002\000\006\003\027\037\026\001\002\000" +
    "\010\003\uffef\017\024\021\uffef\001\002\000\016\003\uffee" +
    "\004\004\005\014\006\006\010\007\021\uffee\001\002\000" +
    "\006\003\ufff0\021\ufff0\001\002\000\010\003\uffed\017\uffed" +
    "\021\uffed\001\002\000\010\003\uffec\017\uffec\021\uffec\001" +
    "\002\000\004\016\031\001\002\000\012\004\ufffb\005\ufffb" +
    "\006\ufffb\010\ufffb\001\002\000\006\003\374\020\373\001" +
    "\002\000\004\020\367\001\002\000\004\020\035\001\002" +
    "\000\014\004\004\005\014\006\006\010\007\021\uffee\001" +
    "\002\000\004\021\037\001\002\000\004\022\040\001\002" +
    "\000\046\004\004\005\014\006\006\007\064\010\007\011" +
    "\053\012\045\020\055\027\075\030\044\031\051\033\047" +
    "\034\060\035\076\036\065\037\054\042\070\044\074\001" +
    "\002\000\052\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\020\uffc9\023\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\042\uffc9\044\uffc9\001\002\000\052\003\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\020\uffe5" +
    "\023\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\042\uffe5\044\uffe5\001\002\000\020" +
    "\007\064\020\055\035\076\036\065\037\054\042\070\044" +
    "\074\001\002\000\006\003\342\020\341\001\002\000\006" +
    "\003\323\020\322\001\002\000\016\003\uffd9\013\224\016" +
    "\uffd9\017\uffd9\021\uffd9\024\314\001\002\000\016\003\307" +
    "\007\064\035\076\036\065\037\054\042\070\001\002\000" +
    "\012\003\uffdd\016\uffdd\017\uffdd\021\uffdd\001\002\000\006" +
    "\003\257\020\256\001\002\000\052\003\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\020\uffe9" +
    "\023\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\042\uffe9\044\uffe9\001\002\000\006" +
    "\003\231\020\230\001\002\000\030\003\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\021\uffce\024\uffce\025\uffce" +
    "\026\uffce\045\uffce\001\002\000\016\007\064\020\055\035" +
    "\076\036\065\037\054\042\070\001\002\000\052\003\uffea" +
    "\004\004\005\014\006\006\007\064\010\007\011\053\012" +
    "\045\020\055\023\uffea\027\075\030\044\031\051\033\047" +
    "\034\060\035\076\036\065\037\054\042\070\044\074\001" +
    "\002\000\022\003\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\024\uffd2\045\uffd2\001\002\000\052\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\020\uffe4\023\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\042\uffe4\044\uffe4\001\002" +
    "\000\022\003\uffd5\013\uffd5\014\217\016\uffd5\017\uffd5\021" +
    "\uffd5\024\uffd5\045\216\001\002\000\022\003\uffd0\013\uffd0" +
    "\014\uffd0\016\uffd0\017\uffd0\021\uffd0\024\uffd0\045\uffd0\001" +
    "\002\000\054\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\012\uffca\020\uffca\023\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\205\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\042\uffca\044\uffca\001\002\000\030\003\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\045\uffcd\001\002\000\030\003\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\045\uffcc\001\002\000\052\003\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\020\uffc8\023\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\042\uffc8\044\uffc8\001\002" +
    "\000\052\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\020\uffe6\023\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042" +
    "\uffe6\044\uffe6\001\002\000\030\003\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\021\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\045\uffcf\001\002\000\052\003\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\020\uffe8\023" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\042\uffe8\044\uffe8\001\002\000\006\016" +
    "\202\017\201\001\002\000\052\003\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\020\uffe7\023" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\042\uffe7\044\uffe7\001\002\000\020\007" +
    "\064\020\055\035\076\036\065\037\054\042\070\044\074" +
    "\001\002\000\006\003\102\020\101\001\002\000\030\003" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\045\uffcb\001\002\000\004\023" +
    "\100\001\002\000\016\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\010\ufffd\001\002\000\004\004\104\001\002\000" +
    "\004\004\104\001\002\000\004\016\115\001\002\000\006" +
    "\003\106\037\105\001\002\000\006\003\111\024\112\001" +
    "\002\000\004\024\107\001\002\000\014\007\064\035\076" +
    "\036\065\037\054\042\070\001\002\000\004\016\uffa8\001" +
    "\002\000\014\007\064\035\076\036\065\037\054\042\070" +
    "\001\002\000\014\007\064\035\076\036\065\037\054\042" +
    "\070\001\002\000\004\016\uffaa\001\002\000\004\016\uffa9" +
    "\001\002\000\016\003\116\007\064\035\076\036\065\037" +
    "\054\042\070\001\002\000\004\015\144\001\002\000\006" +
    "\003\143\015\144\001\002\000\004\016\121\001\002\000" +
    "\004\037\122\001\002\000\010\013\130\014\132\045\131" +
    "\001\002\000\004\021\124\001\002\000\004\022\125\001" +
    "\002\000\046\004\004\005\014\006\006\007\064\010\007" +
    "\011\053\012\045\020\055\027\075\030\044\031\051\033" +
    "\047\034\060\035\076\036\065\037\054\042\070\044\074" +
    "\001\002\000\004\023\127\001\002\000\052\003\uffae\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\020\uffae\023\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\042\uffae\044\uffae\001\002" +
    "\000\006\013\137\024\140\001\002\000\004\024\135\001" +
    "\002\000\004\024\133\001\002\000\004\042\134\001\002" +
    "\000\006\003\uffa4\021\uffa4\001\002\000\004\042\136\001" +
    "\002\000\006\003\uffa5\021\uffa5\001\002\000\006\003\uffa7" +
    "\021\uffa7\001\002\000\004\042\141\001\002\000\006\003" +
    "\uffa6\021\uffa6\001\002\000\016\003\146\007\064\035\076" +
    "\036\065\037\054\042\070\001\002\000\014\007\064\035" +
    "\076\036\065\037\054\042\070\001\002\000\016\003\uffb7" +
    "\007\uffb7\035\uffb7\036\uffb7\037\uffb7\042\uffb7\001\002\000" +
    "\010\003\uffb8\016\uffb8\021\uffb8\001\002\000\010\003\uffb9" +
    "\016\uffb9\021\uffb9\001\002\000\014\003\uffbc\016\uffbc\021" +
    "\uffbc\025\152\026\150\001\002\000\016\003\116\007\064" +
    "\035\076\036\065\037\054\042\070\001\002\000\010\003" +
    "\uffbb\016\uffbb\021\uffbb\001\002\000\016\003\116\007\064" +
    "\035\076\036\065\037\054\042\070\001\002\000\010\003" +
    "\uffb5\016\uffb5\021\uffb5\001\002\000\010\003\uffb6\016\uffb6" +
    "\021\uffb6\001\002\000\014\007\064\035\076\036\065\037" +
    "\054\042\070\001\002\000\010\003\uffba\016\uffba\021\uffba" +
    "\001\002\000\004\016\160\001\002\000\016\003\116\007" +
    "\064\035\076\036\065\037\054\042\070\001\002\000\004" +
    "\016\162\001\002\000\004\037\122\001\002\000\006\003" +
    "\164\021\165\001\002\000\004\022\175\001\002\000\006" +
    "\003\166\022\167\001\002\000\046\004\004\005\014\006" +
    "\006\007\064\010\007\011\053\012\045\020\055\027\075" +
    "\030\044\031\051\033\047\034\060\035\076\036\065\037" +
    "\054\042\070\044\074\001\002\000\046\004\004\005\014" +
    "\006\006\007\064\010\007\011\053\012\045\020\055\027" +
    "\075\030\044\031\051\033\047\034\060\035\076\036\065" +
    "\037\054\042\070\044\074\001\002\000\006\003\171\023" +
    "\172\001\002\000\052\003\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\020\uffab\023\uffab\027" +
    "\uffab\030\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\042\uffab\044\uffab\001\002\000\052\003\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\020\uffaf\023\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\042\uffaf\044\uffaf\001\002" +
    "\000\004\023\174\001\002\000\052\003\uffac\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\020\uffac" +
    "\023\uffac\027\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\042\uffac\044\uffac\001\002\000\046" +
    "\004\004\005\014\006\006\007\064\010\007\011\053\012" +
    "\045\020\055\027\075\030\044\031\051\033\047\034\060" +
    "\035\076\036\065\037\054\042\070\044\074\001\002\000" +
    "\004\023\177\001\002\000\052\003\uffad\004\uffad\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\020\uffad\023" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\042\uffad\044\uffad\001\002\000\012\003" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\001\002\000\020\007\064" +
    "\020\055\035\076\036\065\037\054\042\070\044\074\001" +
    "\002\000\052\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\020\uffdf\023\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\042\uffdf\044\uffdf\001\002\000\012\003\uffde\016\uffde\017" +
    "\uffde\021\uffde\001\002\000\054\003\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\020\uffc6\023" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\042\uffc6\044\uffc6\001\002\000" +
    "\010\003\206\022\210\031\051\001\002\000\046\004\004" +
    "\005\014\006\006\007\064\010\007\011\053\012\045\020" +
    "\055\027\075\030\044\031\051\033\047\034\060\035\076" +
    "\036\065\037\054\042\070\044\074\001\002\000\054\003" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\020\uffbf\023\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\205\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf" +
    "\044\uffbf\001\002\000\046\004\004\005\014\006\006\007" +
    "\064\010\007\011\053\012\045\020\055\027\075\030\044" +
    "\031\051\033\047\034\060\035\076\036\065\037\054\042" +
    "\070\044\074\001\002\000\006\003\212\023\213\001\002" +
    "\000\054\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\020\uffbd\023\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\042\uffbd\044\uffbd\001\002\000\054\003\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\020" +
    "\uffc0\023\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\042\uffc0\044\uffc0\001" +
    "\002\000\004\023\215\001\002\000\054\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\020" +
    "\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\042\uffbe\044\uffbe\001" +
    "\002\000\016\007\064\020\055\035\076\036\065\037\054" +
    "\042\070\001\002\000\016\007\064\020\055\035\076\036" +
    "\065\037\054\042\070\001\002\000\022\003\uffd4\013\uffd4" +
    "\014\uffd4\016\uffd4\017\uffd4\021\uffd4\024\uffd4\045\uffd4\001" +
    "\002\000\022\003\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\024\uffd3\045\uffd3\001\002\000\006\003\uffeb\023" +
    "\uffeb\001\002\000\006\013\224\021\226\001\002\000\016" +
    "\007\uff91\020\uff91\035\uff91\036\uff91\037\uff91\042\uff91\001" +
    "\002\000\016\007\064\020\055\035\076\036\065\037\054" +
    "\042\070\001\002\000\022\003\uffd1\013\uffd1\014\uffd1\016" +
    "\uffd1\017\uffd1\021\uffd1\024\uffd1\045\uffd1\001\002\000\022" +
    "\003\uffd6\013\uffd6\014\217\016\uffd6\017\uffd6\021\uffd6\024" +
    "\uffd6\045\216\001\002\000\004\046\241\001\002\000\004" +
    "\046\232\001\002\000\006\017\233\021\234\001\002\000" +
    "\020\007\064\020\055\035\076\036\065\037\054\042\070" +
    "\044\074\001\002\000\004\016\235\001\002\000\052\003" +
    "\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\020\uff9d\023\uff9d\027\uff9d\030\uff9d\031\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\042\uff9d\044\uff9d" +
    "\001\002\000\006\017\201\021\237\001\002\000\004\016" +
    "\240\001\002\000\052\003\uff9a\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\012\uff9a\020\uff9a\023\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\042\uff9a\044\uff9a\001\002\000\010\003\243\017" +
    "\242\021\244\001\002\000\020\007\064\020\055\035\076" +
    "\036\065\037\054\042\070\044\074\001\002\000\004\016" +
    "\247\001\002\000\006\003\246\016\245\001\002\000\052" +
    "\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\020\uff9f\023\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\042\uff9f\044" +
    "\uff9f\001\002\000\052\003\uff9b\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\020\uff9b\023\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\037\uff9b\042\uff9b\044\uff9b\001\002\000\052\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\020\uff9c\023\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\042\uff9c\044\uff9c\001\002" +
    "\000\010\003\251\017\201\021\252\001\002\000\004\016" +
    "\255\001\002\000\006\003\254\016\253\001\002\000\052" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\020\uff9e\023\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\042\uff9e\044" +
    "\uff9e\001\002\000\052\003\uff98\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\012\uff98\020\uff98\023\uff98\027" +
    "\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\042\uff98\044\uff98\001\002\000\052\003\uff99\004" +
    "\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\020\uff99\023\uff99\027\uff99\030\uff99\031\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\042\uff99\044\uff99\001\002" +
    "\000\016\003\265\007\064\035\076\036\065\037\054\042" +
    "\070\001\002\000\016\003\116\007\064\035\076\036\065" +
    "\037\054\042\070\001\002\000\004\021\261\001\002\000" +
    "\004\022\262\001\002\000\046\004\004\005\014\006\006" +
    "\007\064\010\007\011\053\012\045\020\055\027\075\030" +
    "\044\031\051\033\047\034\060\035\076\036\065\037\054" +
    "\042\070\044\074\001\002\000\004\023\264\001\002\000" +
    "\054\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\020\uffc5\023\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\042\uffc5\044\uffc5\001\002\000\006\015\144\021\303\001" +
    "\002\000\006\003\267\021\270\001\002\000\004\022\300" +
    "\001\002\000\006\003\271\022\272\001\002\000\046\004" +
    "\004\005\014\006\006\007\064\010\007\011\053\012\045" +
    "\020\055\027\075\030\044\031\051\033\047\034\060\035" +
    "\076\036\065\037\054\042\070\044\074\001\002\000\046" +
    "\004\004\005\014\006\006\007\064\010\007\011\053\012" +
    "\045\020\055\027\075\030\044\031\051\033\047\034\060" +
    "\035\076\036\065\037\054\042\070\044\074\001\002\000" +
    "\006\003\274\023\275\001\002\000\054\003\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\020" +
    "\uffc2\023\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\042\uffc2\044\uffc2\001" +
    "\002\000\054\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\020\uffc7\023\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\042\uffc7\044\uffc7\001\002\000\004\023\277\001" +
    "\002\000\054\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\020\uffc3\023\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\042\uffc3\044\uffc3\001\002\000\046\004\004\005" +
    "\014\006\006\007\064\010\007\011\053\012\045\020\055" +
    "\027\075\030\044\031\051\033\047\034\060\035\076\036" +
    "\065\037\054\042\070\044\074\001\002\000\004\023\302" +
    "\001\002\000\054\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\020\uffc4\023\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\042\uffc4\044\uffc4\001\002\000\004\022\304" +
    "\001\002\000\046\004\004\005\014\006\006\007\064\010" +
    "\007\011\053\012\045\020\055\027\075\030\044\031\051" +
    "\033\047\034\060\035\076\036\065\037\054\042\070\044" +
    "\074\001\002\000\004\023\306\001\002\000\054\003\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\020\uffc1\023\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\042\uffc1\044" +
    "\uffc1\001\002\000\004\016\313\001\002\000\006\003\312" +
    "\016\311\001\002\000\052\003\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\020\uffe3\023\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\042\uffe3\044\uffe3\001\002\000\052\003\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\020\uffe1\023\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\042\uffe1\044\uffe1\001" +
    "\002\000\052\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\020\uffe2\023\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\042\uffe2\044\uffe2\001\002\000\020\007\064\020\055\035" +
    "\076\036\065\037\054\042\070\044\320\001\002\000\012" +
    "\003\uffdc\016\uffdc\017\uffdc\021\uffdc\001\002\000\012\003" +
    "\uffda\016\uffda\017\uffda\021\uffda\001\002\000\014\003\uffd8" +
    "\013\224\016\uffd8\017\uffd8\021\uffd8\001\002\000\004\037" +
    "\321\001\002\000\012\003\uffd7\016\uffd7\017\uffd7\021\uffd7" +
    "\001\002\000\004\046\331\001\002\000\004\046\324\001" +
    "\002\000\004\017\325\001\002\000\020\007\064\020\055" +
    "\035\076\036\065\037\054\042\070\044\074\001\002\000" +
    "\006\017\201\021\327\001\002\000\004\016\330\001\002" +
    "\000\052\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\020\uffa2\023\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\042" +
    "\uffa2\044\uffa2\001\002\000\004\017\332\001\002\000\020" +
    "\007\064\020\055\035\076\036\065\037\054\042\070\044" +
    "\074\001\002\000\010\003\334\017\201\021\335\001\002" +
    "\000\004\016\340\001\002\000\006\003\337\016\336\001" +
    "\002\000\052\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\020\uffa3\023\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\042\uffa3\044\uffa3\001\002\000\052\003\uffa0\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\020\uffa0" +
    "\023\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\042\uffa0\044\uffa0\001\002\000\052" +
    "\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\020\uffa1\023\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\042\uffa1\044" +
    "\uffa1\001\002\000\016\003\116\007\064\035\076\036\065" +
    "\037\054\042\070\001\002\000\016\003\116\007\064\035" +
    "\076\036\065\037\054\042\070\001\002\000\004\021\344" +
    "\001\002\000\004\022\345\001\002\000\046\004\004\005" +
    "\014\006\006\007\064\010\007\011\053\012\045\020\055" +
    "\027\075\030\044\031\051\033\047\034\060\035\076\036" +
    "\065\037\054\042\070\044\074\001\002\000\004\023\347" +
    "\001\002\000\052\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\020\uffb3\023\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\042\uffb3\044\uffb3\001\002\000\006\003\351\021\352" +
    "\001\002\000\004\022\362\001\002\000\006\003\353\022" +
    "\354\001\002\000\046\004\004\005\014\006\006\007\064" +
    "\010\007\011\053\012\045\020\055\027\075\030\044\031" +
    "\051\033\047\034\060\035\076\036\065\037\054\042\070" +
    "\044\074\001\002\000\046\004\004\005\014\006\006\007" +
    "\064\010\007\011\053\012\045\020\055\027\075\030\044" +
    "\031\051\033\047\034\060\035\076\036\065\037\054\042" +
    "\070\044\074\001\002\000\006\003\356\023\357\001\002" +
    "\000\052\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\020\uffb0\023\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\042" +
    "\uffb0\044\uffb0\001\002\000\052\003\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\020\uffb4\023" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\042\uffb4\044\uffb4\001\002\000\004\023" +
    "\361\001\002\000\052\003\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\020\uffb1\023\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\042\uffb1\044\uffb1\001\002\000\046\004\004\005" +
    "\014\006\006\007\064\010\007\011\053\012\045\020\055" +
    "\027\075\030\044\031\051\033\047\034\060\035\076\036" +
    "\065\037\054\042\070\044\074\001\002\000\004\023\364" +
    "\001\002\000\052\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\023\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\042\uffb2\044\uffb2\001\002\000\006\016\366\017\201" +
    "\001\002\000\052\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\020\uffe0\023\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\042\uffe0\044\uffe0\001\002\000\014\004\004\005\014" +
    "\006\006\010\007\021\uffee\001\002\000\004\021\371\001" +
    "\002\000\004\016\372\001\002\000\012\004\ufffa\005\ufffa" +
    "\006\ufffa\010\ufffa\001\002\000\016\003\uffee\004\004\005" +
    "\014\006\006\010\007\021\uffee\001\002\000\014\004\004" +
    "\005\014\006\006\010\007\021\uffee\001\002\000\004\021" +
    "\376\001\002\000\004\016\377\001\002\000\012\004\ufff9" +
    "\005\ufff9\006\ufff9\010\ufff9\001\002\000\006\003\u0101\021" +
    "\u0102\001\002\000\004\016\u0104\001\002\000\004\016\u0103" +
    "\001\002\000\012\004\ufffc\005\ufffc\006\ufffc\010\ufffc\001" +
    "\002\000\012\004\ufff8\005\ufff8\006\ufff8\010\ufff8\001\002" +
    "\000\004\002\001\001\002\000\014\003\u010a\004\004\005" +
    "\014\006\006\010\007\001\002\000\004\043\034\001\002" +
    "\000\004\002\uffff\001\002\000\016\002\ufff6\003\u010a\004" +
    "\004\005\014\006\006\010\007\001\002\000\004\037\u0124" +
    "\001\002\000\006\003\u010d\037\u010c\001\002\000\006\003" +
    "\u0115\020\u0114\001\002\000\004\020\u010e\001\002\000\014" +
    "\004\004\005\014\006\006\010\007\021\uffee\001\002\000" +
    "\004\021\u0110\001\002\000\004\022\u0111\001\002\000\046" +
    "\004\004\005\014\006\006\007\064\010\007\011\053\012" +
    "\045\020\055\027\075\030\044\031\051\033\047\034\060" +
    "\035\076\036\065\037\054\042\070\044\074\001\002\000" +
    "\004\023\u0113\001\002\000\016\002\ufff4\003\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\010\ufff4\001\002\000\016\003\uffee\004" +
    "\004\005\014\006\006\010\007\021\uffee\001\002\000\014" +
    "\004\004\005\014\006\006\010\007\021\uffee\001\002\000" +
    "\004\021\u0117\001\002\000\004\022\u0118\001\002\000\046" +
    "\004\004\005\014\006\006\007\064\010\007\011\053\012" +
    "\045\020\055\027\075\030\044\031\051\033\047\034\060" +
    "\035\076\036\065\037\054\042\070\044\074\001\002\000" +
    "\004\023\u011a\001\002\000\016\002\ufff2\003\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\010\ufff2\001\002\000\006\003\u011c\021" +
    "\u011d\001\002\000\004\022\u0121\001\002\000\004\022\u011e" +
    "\001\002\000\046\004\004\005\014\006\006\007\064\010" +
    "\007\011\053\012\045\020\055\027\075\030\044\031\051" +
    "\033\047\034\060\035\076\036\065\037\054\042\070\044" +
    "\074\001\002\000\004\023\u0120\001\002\000\016\002\ufff5" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\010\ufff5\001\002\000" +
    "\046\004\004\005\014\006\006\007\064\010\007\011\053" +
    "\012\045\020\055\027\075\030\044\031\051\033\047\034" +
    "\060\035\076\036\065\037\054\042\070\044\074\001\002" +
    "\000\004\023\u0123\001\002\000\016\002\ufff1\003\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\010\ufff1\001\002\000\004\020\u0125" +
    "\001\002\000\014\004\004\005\014\006\006\010\007\021" +
    "\uffee\001\002\000\004\021\u0127\001\002\000\004\022\u0128" +
    "\001\002\000\046\004\004\005\014\006\006\007\064\010" +
    "\007\011\053\012\045\020\055\027\075\030\044\031\051" +
    "\033\047\034\060\035\076\036\065\037\054\042\070\044" +
    "\074\001\002\000\004\023\u012a\001\002\000\016\002\ufff3" +
    "\003\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3\001\002\000" +
    "\004\002\ufff7\001\002\000\024\003\uff95\007\uff95\020\uff95" +
    "\035\uff95\036\uff95\037\uff95\042\uff95\043\uff95\044\uff95\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\012\002\010\003\004\004\007\013\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\u0105\013\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\015\003\004" +
    "\004\007\013\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\022" +
    "\010\020\013\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\022\010\024\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\022\010" +
    "\035\013\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\055\012\076\013\042\014\041\015\051\016" +
    "\070\017\072\020\066\021\047\022\071\023\061\024\062" +
    "\027\040\030\065\034\045\035\060\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\047\022\364" +
    "\023\061\034\045\035\060\036\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\314\041\224\001\001" +
    "\000\004\023\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\061\034\222\035\060\036\056\001\001\000" +
    "\044\011\055\012\221\013\042\014\041\015\051\016\070" +
    "\017\072\020\066\021\047\022\071\023\061\024\062\027" +
    "\040\030\065\034\045\035\060\036\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\177\023\061\034\045\035\060\036\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\156\001\001\000\004\031" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\107\001\001\000" +
    "\002\001\001\000\004\023\113\001\001\000\004\023\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\116\026\117\001\001\000\004\042\154\001\001\000\004" +
    "\042\141\001\001\000\002\001\001\000\004\032\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\055\012\125\013\042\014\041\015\051\016" +
    "\070\017\072\020\066\021\047\022\071\023\061\024\062" +
    "\027\040\030\065\034\045\035\060\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\146\001" +
    "\001\000\004\023\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\150\001\001\000" +
    "\006\023\116\026\153\001\001\000\002\001\001\000\006" +
    "\023\116\026\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\116\026\160\001\001\000\002\001" +
    "\001\000\004\032\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\011\055\012\172\013" +
    "\042\014\041\015\051\016\070\017\072\020\066\021\047" +
    "\022\071\023\061\024\062\027\040\030\065\034\045\035" +
    "\060\036\056\001\001\000\044\011\055\012\167\013\042" +
    "\014\041\015\051\016\070\017\072\020\066\021\047\022" +
    "\071\023\061\024\062\027\040\030\065\034\045\035\060" +
    "\036\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\055\012\175\013\042\014\041\015\051\016\070\017" +
    "\072\020\066\021\047\022\071\023\061\024\062\027\040" +
    "\030\065\034\045\035\060\036\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\202" +
    "\023\061\034\045\035\060\036\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\206" +
    "\001\001\000\044\011\055\012\213\013\042\014\041\015" +
    "\051\016\070\017\072\020\066\021\047\022\071\023\061" +
    "\024\062\027\040\030\065\034\045\035\060\036\056\001" +
    "\001\000\004\025\203\001\001\000\044\011\055\012\210" +
    "\013\042\014\041\015\051\016\070\017\072\020\066\021" +
    "\047\022\071\023\061\024\062\027\040\030\065\034\045" +
    "\035\060\036\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\061\036\220\001\001\000\006\023\061\036" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\224\001\001\000\002\001\001\000" +
    "\010\023\061\035\226\036\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\047\022\235\023\061\034\045" +
    "\035\060\036\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\047\022\247\023\061\034" +
    "\045\035\060\036\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\116\026\265\001\001\000\006\023\116\026\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\055\012\262\013\042\014\041\015\051\016\070\017\072" +
    "\020\066\021\047\022\071\023\061\024\062\027\040\030" +
    "\065\034\045\035\060\036\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\055" +
    "\012\275\013\042\014\041\015\051\016\070\017\072\020" +
    "\066\021\047\022\071\023\061\024\062\027\040\030\065" +
    "\034\045\035\060\036\056\001\001\000\044\011\055\012" +
    "\272\013\042\014\041\015\051\016\070\017\072\020\066" +
    "\021\047\022\071\023\061\024\062\027\040\030\065\034" +
    "\045\035\060\036\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\055\012\300\013\042\014\041\015\051" +
    "\016\070\017\072\020\066\021\047\022\071\023\061\024" +
    "\062\027\040\030\065\034\045\035\060\036\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\055\012\304\013\042\014\041\015\051\016\070" +
    "\017\072\020\066\021\047\022\071\023\061\024\062\027" +
    "\040\030\065\034\045\035\060\036\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\061\034\316\035\060\036\056\037\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\047" +
    "\022\325\023\061\034\045\035\060\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\047\022\332\023\061\034\045\035" +
    "\060\036\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\116\026\347\001\001\000\006" +
    "\023\116\026\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\011\055\012\345\013\042\014\041\015\051" +
    "\016\070\017\072\020\066\021\047\022\071\023\061\024" +
    "\062\027\040\030\065\034\045\035\060\036\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\055\012\357" +
    "\013\042\014\041\015\051\016\070\017\072\020\066\021" +
    "\047\022\071\023\061\024\062\027\040\030\065\034\045" +
    "\035\060\036\056\001\001\000\044\011\055\012\354\013" +
    "\042\014\041\015\051\016\070\017\072\020\066\021\047" +
    "\022\071\023\061\024\062\027\040\030\065\034\045\035" +
    "\060\036\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\055\012\362\013\042\014\041\015\051\016\070" +
    "\017\072\020\066\021\047\022\071\023\061\024\062\027" +
    "\040\030\065\034\045\035\060\036\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\022\010\367\013\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\022\010\377\013\021\001\001\000\010\007\022\010\374" +
    "\013\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u0107\006\u0108\013\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\u012a\006\u0108\013" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\022\010\u010e\013" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\011\055\012\u0111\013\042\014\041\015\051\016\070\017" +
    "\072\020\066\021\047\022\071\023\061\024\062\027\040" +
    "\030\065\034\045\035\060\036\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\022\010\u011a\013\021" +
    "\001\001\000\010\007\022\010\u0115\013\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\055\012\u0118" +
    "\013\042\014\041\015\051\016\070\017\072\020\066\021" +
    "\047\022\071\023\061\024\062\027\040\030\065\034\045" +
    "\035\060\036\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\055\012\u011e\013\042\014\041\015\051\016" +
    "\070\017\072\020\066\021\047\022\071\023\061\024\062" +
    "\027\040\030\065\034\045\035\060\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\055\012\u0121" +
    "\013\042\014\041\015\051\016\070\017\072\020\066\021" +
    "\047\022\071\023\061\024\062\027\040\030\065\034\045" +
    "\035\060\036\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\022\010\u0125\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\011" +
    "\055\012\u0128\013\042\014\041\015\051\016\070\017\072" +
    "\020\066\021\047\022\071\023\061\024\062\027\040\030" +
    "\065\034\045\035\060\036\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public CMiniProgram root = null;

    ArrayList<String> errores = new ArrayList();

    @Override
    public void report_error(String message, Object info) {
    	StringBuilder m = new StringBuilder("Syntax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
			if (s.sym == 0) {
				m.append(" : Part of declaration (main or function) is missing");
			}else{
				m.append(" Unexpected token: "+ getToken(s.sym));
			}
		}
		System.err.println(m);
       
    }

    private String getToken(int id) {
        try {
	        Field [] field = sym.class.getFields();
	        for (int i = 0; i < field.length; i++) {
	          	if (field[i].getInt(null) == id) {
	                return field[i].getName();
	            }
	            
	        }
        } catch (Exception e) {          
        }
        return "UNKOWN";
    }
    

    public void report_fatal_error(String message, Object info) {
		//report_error(" Could not recover", info);
	}
    
    @Override
    public int error_sync_size(){
        return 1;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opsum ::= ARTHMEXPSUM 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (op == "+") {
					RESULT = "+";
				}else if (op == "-") {
					RESULT = "-";
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsum",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type ::= VOID 
            {
              Types RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type ::= BOOLEAN 
            {
              Types RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)b);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type ::= CHAR ASTERISK 
            {
              Types RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)c, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type ::= INT ASTERISK 
            {
              Types RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)i, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type ::= CHAR 
            {
              Types RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)c);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type ::= INT 
            {
              Types RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)i);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH error 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ';'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA varDeclList error SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ')'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // printers ::= PRINTF error CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token '('");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // printers ::= PRINTF LEFTPRNTH CONSTSTR RIGHTPRNTH error 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ';'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // printers ::= PRINTF LEFTPRNTH CONSTSTR error SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ')'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // printers ::= PRINTF error CONSTSTR RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token '('");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Printers r= new Printers((String)pf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // printers ::= PRINTF LEFTPRNTH CONSTSTR RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Printers r = new Printers((String)pf,sl);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH error 
            {
              Scanners RESULT =null;
		
				System.err.println("Missing token ';'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA varDeclList error SEMICOLON 
            {
              Scanners RESULT =null;
		
				System.err.println("Missing token ')'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // scanners ::= SCANF error CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Scanners RESULT =null;
		
				System.err.println("Missing token '('");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Scanners RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Scanners r= new Scanners((String)sf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // forArthmExp ::= ID DIVIDE EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // forArthmExp ::= ID ASTERISK EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // forArthmExp ::= ID ARTHMEXPSUM EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // forArthmExp ::= ID ARTHMEXPSUM ARTHMEXPSUM 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aES1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aES1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object aES1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aES2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aES2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aES2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES1, (String)aES2);
				if(aES1 != aES2){
					
				}
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // inits ::= INT error EQUALS value 
            {
              Inits RESULT =null;
		
			System.err.println("Expected an id");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // inits ::= INT ID error value 
            {
              Inits RESULT =null;
		
			System.err.println("Missing token '='");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // inits ::= INT ID EQUALS value 
            {
              Inits RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Inits r = new Inits((String)i, (String)id,v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions error 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH error expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp error LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // forStatement ::= FOR error inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Inits i = (Inits)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ForArthmExp aE = (ForArthmExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					ForStatement r = new ForStatement((String)f, i, c, aE, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions error 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH error expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // whileStatement ::= WHILE LEFTPRNTH condition error LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // whileStatement ::= WHILE error condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					WhileStatement r = new WhileStatement((String)w, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // andOr ::= OR condition 
            {
              AndOR RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)o,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // andOr ::= AND condition 
            {
              AndOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)a,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operators ::= BOOLEXP 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (b == "<") {
					RESULT = "<";
				}else if (b == ">") {
					RESULT = ">";
				}else if (b == "<=") {
					RESULT = "<=";
				}else if (b == ">=") {
					RESULT = ">=";
				}else if (b == "!=") {
					RESULT = "!=";
				}else if (b == "==") {
					RESULT = "==";
				}else{
					
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operators",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= value error value 
            {
              Condition RESULT =null;
		
				System.err.println("Expected an operator");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condition ::= value operators error 
            {
              Condition RESULT =null;
		
				System.err.println("Expected a final value");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condition ::= error operators value 
            {
              Condition RESULT =null;
		
				System.err.println("Expected an initial value");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condition ::= value operators value andOr 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndOR aO = (AndOR)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2,aO);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condition ::= value operators value 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elseStatement ::= ELSE LEFTCBRAC expressions error 
            {
              ElseStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elseStatement ::= ELSE error expressions RIGHTCBRAC 
            {
              ElseStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elseStatement ::= ELSE ifStatement 
            {
              ElseStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifS = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ElseStatement r = new ElseStatement((String)e, ifS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elseStatement ::= ELSE LEFTCBRAC expressions RIGHTCBRAC 
            {
              ElseStatement RESULT =null;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					ElseStatement r = new ElseStatement((String)eS, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifStatement ::= IF LEFTPRNTH error RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("IF expected a condition");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions error 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH error expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ifStatement ::= IF LEFTPRNTH condition error LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ifStatement ::= IF error condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ifStatement ::= ifStatement elseStatement 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatement i = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseStatement eS = (ElseStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					IfStatement r = new IfStatement(i, eS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					IfStatement r = new IfStatement((String)i, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statements ::= forStatement 
            {
              Statements RESULT =null;
		int fSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStatement fS = (ForStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(fS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statements ::= whileStatement 
            {
              Statements RESULT =null;
		int wSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement wS = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(wS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statements ::= ifStatement 
            {
              Statements RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifs = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					Statements r = new Statements(ifs);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= NULL 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)n, "null");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= BOOLTOF 
            {
              Value RESULT =null;
		int tFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)tF, "bool");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= CONSTCHAR 
            {
              Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object character = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)character, "char");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)id, "id");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= INTEGER 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)num, "int");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= value 
            {
              Factor RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Factor r = new Factor(val);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= LEFTPRNTH arithmeticExp RIGHTPRNTH 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				Factor r = new Factor(e);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(f);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= term ASTERISK factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(t, "*", f);
					RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= term DIVIDE factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(t, "/", f);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithmeticExp ::= term 
            {
              ArithmeticExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ArithmeticExp r = new ArithmeticExp(t);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithmeticExp ::= arithmeticExp opsum term 
            {
              ArithmeticExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opsumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opsum = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if (opsum == "+") {
							ArithmeticExp r = new ArithmeticExp(e, "+", t);
							RESULT = r;
						}else if (opsum == "-") {
							ArithmeticExp r = new ArithmeticExp(e, "-", t);
							RESULT = r;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= AMPERSAND ID 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Assignment r = new Assignment((String)a, (String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment ::= arithmeticExp 
            {
              Assignment RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExp aE = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Assignment r = new Assignment(aE);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignmentProc ::= 
            {
              AssignmentProc RESULT =null;
		
						RESULT = null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentProc",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignmentProc ::= EQUALS assignment 
            {
              AssignmentProc RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						AssignmentProc r = new AssignmentProc(a);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentProc",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variables ::= AMPERSAND variables 
            {
              Variables RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  			Variables r = new Variables((String)a, v);
			  		RESULT = r;
	  			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variables ::= arithmeticExp assignmentProc 
            {
              Variables RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp aE = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignmentProc a = (AssignmentProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Variables r = new Variables(aE, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varDeclList ::= variables 
            {
              VarDeclarationList RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables vars = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					VarDeclarationList r = new VarDeclarationList(vars);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varDeclList ::= varDeclList COMMA variables 
            {
              VarDeclarationList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables vars = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					VarDeclarationList r = new VarDeclarationList(v,vars);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variableDeclaration ::= varDeclList SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							VariableDeclaration r = new VariableDeclaration(v);
							RESULT = r;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variableDeclaration ::= type varDeclList SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							VariableDeclaration r = new VariableDeclaration(t, v);
							RESULT = r;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // returnStatement ::= RETURN value error 
            {
              ReturnStatement RESULT =null;
		
						System.err.println("Missing token, expected ';'");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // returnStatement ::= RETURN error SEMICOLON 
            {
              ReturnStatement RESULT =null;
		
						System.err.println("Missing return value");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // returnStatement ::= RETURN value SEMICOLON 
            {
              ReturnStatement RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						ReturnStatement r = new ReturnStatement((String)ret, val);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= BREAK 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression((String)b);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= returnStatement 
            {
              Expression RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(rs);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= printers 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printers p = (Printers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(p);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= scanners 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Scanners s = (Scanners)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= statements 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= variableDeclaration 
            {
              Expression RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(vd);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= expression 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions ::= expression expressions 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(es, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argument ::= type error 
            {
              Argument RESULT =null;
		  
					System.err.println("Missing argument type");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument ::= type ID 
            {
              Argument RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Argument r = new Argument(t, (String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argumentList ::= 
            {
              ArgumentList RESULT =null;
		
					RESULT = null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argumentList ::= argument 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argumentList ::= argument COMMA argumentList 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(al, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= type ID LEFTPRNTH argumentList error LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= type ID error argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= error ID LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing function type");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= type error LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing Id");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= type ID LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Function r = new Function(t, (String)id, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // functionList ::= function 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(f);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functionList ::= function functionList 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(fl, f);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionDeclaration ::= type ID LEFTPRNTH argumentList error SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // functionDeclaration ::= type ID error argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // functionDeclaration ::= type error LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing id");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionDeclaration ::= error ID LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing function type");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionDeclaration ::= type ID LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					FunctionDeclaration r = new FunctionDeclaration(t, (String)id, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainClause ::= type MAIN LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              MainClause RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					MainClause r = new MainClause(t, (String)m, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cMiniProgram ::= error cMiniProgram 
            {
              CMiniProgram RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cMiniProgram ::= functionDeclaration mainClause functionList 
            {
              CMiniProgram RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(fd, mc, fl);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cMiniProgram ::= mainClause 
            {
              CMiniProgram RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(mc);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cMiniProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CMiniProgram start_val = (CMiniProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

