
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 20 19:27:35 CST 2017
//----------------------------------------------------

package cminicompiler;

import java_cup.runtime.*;
import classes.*;
import java.util.ArrayList;
import java.lang.reflect.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 20 19:27:35 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\012\000\002\004\010" +
    "\000\002\004\007\000\002\004\005\000\002\004\004\000" +
    "\002\005\004\000\002\005\003\000\002\006\012\000\002" +
    "\006\011\000\002\006\007\000\002\010\005\000\002\010" +
    "\003\000\002\010\002\000\002\007\004\000\002\012\004" +
    "\000\002\012\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\014" +
    "\005\000\002\015\005\000\002\015\004\000\002\021\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\007\000" +
    "\002\021\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\023\011\000\002\023\004\000\002\023" +
    "\011\000\002\023\007\000\002\023\006\000\002\023\004" +
    "\000\002\024\006\000\002\024\004\000\002\025\005\000" +
    "\002\025\006\000\002\043\003\000\002\032\004\000\002" +
    "\032\004\000\002\026\011\000\002\027\015\000\002\027" +
    "\004\000\002\030\006\000\002\031\005\000\002\031\006" +
    "\000\002\031\006\000\002\017\011\000\002\020\007\000" +
    "\002\020\011\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\034\004\000" +
    "\002\033\005\000\002\033\003\000\002\035\005\000\002" +
    "\035\005\000\002\035\003\000\002\036\005\000\002\036" +
    "\003\000\002\041\003\000\002\042\003\000\002\040\004" +
    "\000\002\037\005\000\002\037\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\014\003\013\004\004\005\014\006\006\010" +
    "\007\001\002\000\012\037\uffbe\043\uffbe\044\uffbe\045\317" +
    "\001\002\000\004\002\000\001\002\000\010\037\uffba\043" +
    "\uffba\044\uffba\001\002\000\010\037\uffb9\043\uffb9\044\uffb9" +
    "\001\002\000\012\004\004\005\014\006\006\010\007\001" +
    "\002\000\004\002\266\001\002\000\006\037\033\043\034" +
    "\001\002\000\022\003\013\004\004\005\014\006\006\010" +
    "\007\016\021\020\017\021\016\001\002\000\012\037\uffbd" +
    "\043\uffbd\044\uffbd\045\015\001\002\000\010\037\uffbb\043" +
    "\uffbb\044\uffbb\001\002\000\004\016\032\001\002\000\014" +
    "\004\004\005\014\006\006\010\007\021\ufff1\001\002\000" +
    "\004\002\ufffe\001\002\000\012\004\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\001\002\000\004\021\030\001\002\000\004\037" +
    "\027\001\002\000\006\017\025\021\ufff2\001\002\000\014" +
    "\004\004\005\014\006\006\010\007\021\ufff1\001\002\000" +
    "\004\021\ufff3\001\002\000\006\017\ufff0\021\ufff0\001\002" +
    "\000\004\016\031\001\002\000\012\004\ufffb\005\ufffb\006" +
    "\ufffb\010\ufffb\001\002\000\012\004\ufffa\005\ufffa\006\ufffa" +
    "\010\ufffa\001\002\000\004\020\262\001\002\000\004\020" +
    "\035\001\002\000\014\004\004\005\014\006\006\010\007" +
    "\021\ufff1\001\002\000\004\021\037\001\002\000\004\022" +
    "\040\001\002\000\046\003\060\004\004\005\014\006\006" +
    "\007\071\010\007\011\065\012\041\020\074\027\047\030" +
    "\067\031\054\033\057\034\063\035\061\036\052\037\055" +
    "\042\044\001\002\000\004\020\254\001\002\000\050\003" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\020\uffec\023\uffec\027\uffec\030\uffec\031\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\042\uffec\001\002" +
    "\000\050\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\020\uffe9\023\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\042" +
    "\uffe9\001\002\000\024\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\021\uffc2\025\uffc2\026\uffc2\045\uffc2\001\002\000" +
    "\050\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\020\uffed\023\uffed\027\uffed\030\uffed\031" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\042\uffed" +
    "\001\002\000\050\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\020\uffe8\023\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\042\uffe8\001\002\000\004\020\226\001\002\000\050" +
    "\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\020\uffeb\023\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\042\uffeb\001" +
    "\002\000\050\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\020\uffdc\023\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\042\uffdc\001\002\000\024\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\021\uffc0\025\uffc0\026\uffc0\045\uffc0\001\002" +
    "\000\004\016\225\001\002\000\004\020\217\001\002\000" +
    "\014\013\uffc3\014\uffc3\016\uffc3\024\213\045\uffc3\001\002" +
    "\000\050\003\060\004\004\005\014\006\006\007\071\010" +
    "\007\011\065\012\041\020\074\023\uffee\027\047\030\067" +
    "\031\054\033\057\034\063\035\061\036\052\037\055\042" +
    "\044\001\002\000\014\007\071\035\061\036\052\037\110" +
    "\042\044\001\002\000\020\003\206\016\205\020\140\021" +
    "\142\022\143\023\141\027\047\001\002\000\024\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf\025\uffbf\026" +
    "\uffbf\045\uffbf\001\002\000\014\013\uffb6\014\122\016\uffb6" +
    "\021\uffb6\045\123\001\002\000\050\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\020\uffe6" +
    "\023\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\042\uffe6\001\002\000\050\003\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\020\uffe7\023\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\042\uffe7\001\002\000" +
    "\004\020\175\001\002\000\050\003\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\020\uffea\023" +
    "\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\042\uffea\001\002\000\004\020\167\001" +
    "\002\000\014\013\uffb1\014\uffb1\016\uffb1\021\uffb1\045\uffb1" +
    "\001\002\000\024\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\021\uffc1\025\uffc1\026\uffc1\045\uffc1\001\002\000\052" +
    "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\020\uffdd\023\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\132\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\042" +
    "\uffdd\001\002\000\014\013\uffb3\014\uffb3\016\uffb3\021\uffb3" +
    "\045\uffb3\001\002\000\016\007\071\020\074\035\061\036" +
    "\052\037\110\042\044\001\002\000\006\013\116\016\117" +
    "\001\002\000\050\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\020\uffdb\023\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\042\uffdb\001\002\000\004\023\115\001\002\000\006" +
    "\037\101\044\102\001\002\000\012\016\uffe2\017\106\021" +
    "\uffe2\024\107\001\002\000\006\037\101\044\102\001\002" +
    "\000\004\016\104\001\002\000\050\003\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\020\uffe4" +
    "\023\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\042\uffe4\001\002\000\006\016\uffde" +
    "\021\uffde\001\002\000\006\037\101\044\102\001\002\000" +
    "\014\007\071\035\061\036\052\037\110\042\044\001\002" +
    "\000\024\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\021" +
    "\uffc3\025\uffc3\026\uffc3\045\uffc3\001\002\000\010\016\uffe0" +
    "\017\112\021\uffe0\001\002\000\006\037\101\044\102\001" +
    "\002\000\006\016\uffdf\021\uffdf\001\002\000\006\016\uffe1" +
    "\021\uffe1\001\002\000\016\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\010\ufffd\001\002\000\016\007\uffb0\020\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\042\uffb0\001\002\000\050\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\020\uffb8\023\uffb8\027\uffb8\030\uffb8\031\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\042\uffb8\001\002" +
    "\000\016\007\071\020\074\035\061\036\052\037\110\042" +
    "\044\001\002\000\014\013\uffb7\014\122\016\uffb7\021\uffb7" +
    "\045\123\001\002\000\016\007\uffaf\020\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\042\uffaf\001\002\000\016\007\071\020\074" +
    "\035\061\036\052\037\110\042\044\001\002\000\016\007" +
    "\071\020\074\035\061\036\052\037\110\042\044\001\002" +
    "\000\014\013\uffb5\014\uffb5\016\uffb5\021\uffb5\045\uffb5\001" +
    "\002\000\014\013\uffb4\014\uffb4\016\uffb4\021\uffb4\045\uffb4" +
    "\001\002\000\006\013\116\021\130\001\002\000\014\013" +
    "\uffb2\014\uffb2\016\uffb2\021\uffb2\045\uffb2\001\002\000\052" +
    "\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\020\uffd9\023\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\042" +
    "\uffd9\001\002\000\010\003\133\022\135\031\054\001\002" +
    "\000\012\020\140\021\142\022\143\023\141\001\002\000" +
    "\052\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\020\uffd3\023\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\132\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\042\uffd3\001\002\000\046\003\060\004\004\005\014\006" +
    "\006\007\071\010\007\011\065\012\041\020\074\027\047" +
    "\030\067\031\054\033\057\034\063\035\061\036\052\037" +
    "\055\042\044\001\002\000\004\023\137\001\002\000\052" +
    "\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\020\uffd4\023\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\042" +
    "\uffd4\001\002\000\014\007\071\035\061\036\052\037\110" +
    "\042\044\001\002\000\052\003\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\020\uffd5\023\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\042\uffd5\001\002\000\004\022\146" +
    "\001\002\000\046\003\060\004\004\005\014\006\006\007" +
    "\071\010\007\011\065\012\041\020\074\027\047\030\067" +
    "\031\054\033\057\034\063\035\061\036\052\037\055\042" +
    "\044\001\002\000\004\023\145\001\002\000\052\003\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\020\uffd6\023\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6\001" +
    "\002\000\046\003\060\004\004\005\014\006\006\007\071" +
    "\010\007\011\065\012\041\020\074\027\047\030\067\031" +
    "\054\033\057\034\063\035\061\036\052\037\055\042\044" +
    "\001\002\000\004\023\150\001\002\000\052\003\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\020\uffd7\023\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\042\uffd7\001\002" +
    "\000\004\015\160\001\002\000\004\021\153\001\002\000" +
    "\004\022\154\001\002\000\046\003\060\004\004\005\014" +
    "\006\006\007\071\010\007\011\065\012\041\020\074\027" +
    "\047\030\067\031\054\033\057\034\063\035\061\036\052" +
    "\037\055\042\044\001\002\000\004\023\156\001\002\000" +
    "\052\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\020\uffd8\023\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\042\uffd8\001\002\000\014\007\071\035\061\036\052\037" +
    "\110\042\044\001\002\000\014\007\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\042\uffd0\001\002\000\012\016\uffd2\021\uffd2\025" +
    "\164\026\162\001\002\000\014\007\071\035\061\036\052" +
    "\037\110\042\044\001\002\000\006\016\uffd1\021\uffd1\001" +
    "\002\000\014\007\071\035\061\036\052\037\110\042\044" +
    "\001\002\000\006\016\uffce\021\uffce\001\002\000\006\016" +
    "\uffcf\021\uffcf\001\002\000\014\007\071\035\061\036\052" +
    "\037\110\042\044\001\002\000\004\021\171\001\002\000" +
    "\004\022\172\001\002\000\046\003\060\004\004\005\014" +
    "\006\006\007\071\010\007\011\065\012\041\020\074\027" +
    "\047\030\067\031\054\033\057\034\063\035\061\036\052" +
    "\037\055\042\044\001\002\000\004\023\174\001\002\000" +
    "\050\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\020\uffcd\023\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\042\uffcd" +
    "\001\002\000\004\046\176\001\002\000\006\017\177\021" +
    "\200\001\002\000\006\037\101\044\102\001\002\000\004" +
    "\016\201\001\002\000\050\003\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\020\uffc5\023\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\042\uffc5\001\002\000\004\021\203\001\002" +
    "\000\004\016\204\001\002\000\050\003\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\020\uffc4" +
    "\023\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\042\uffc4\001\002\000\050\003\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\020\uffe3\023\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\042\uffe3\001\002\000" +
    "\006\003\206\027\047\001\002\000\050\003\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\020" +
    "\uffcb\023\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\042\uffcb\001\002\000\004\016" +
    "\211\001\002\000\050\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\020\uffe5\023\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\042\uffe5\001\002\000\004\023\uffef\001\002\000" +
    "\020\007\071\020\074\035\061\036\052\037\110\042\044" +
    "\044\215\001\002\000\006\013\116\016\uffad\001\002\000" +
    "\004\037\216\001\002\000\004\016\uffac\001\002\000\014" +
    "\007\071\035\061\036\052\037\110\042\044\001\002\000" +
    "\004\021\221\001\002\000\004\022\222\001\002\000\046" +
    "\003\060\004\004\005\014\006\006\007\071\010\007\011" +
    "\065\012\041\020\074\027\047\030\067\031\054\033\057" +
    "\034\063\035\061\036\052\037\055\042\044\001\002\000" +
    "\004\023\224\001\002\000\052\003\uffda\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\020\uffda\023" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\042\uffda\001\002\000\050\003" +
    "\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\020\uffae\023\uffae\027\uffae\030\uffae\031\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\042\uffae\001\002" +
    "\000\004\004\230\001\002\000\004\016\234\001\002\000" +
    "\004\037\231\001\002\000\004\024\232\001\002\000\014" +
    "\007\071\035\061\036\052\037\110\042\044\001\002\000" +
    "\004\016\uffca\001\002\000\014\007\071\035\061\036\052" +
    "\037\110\042\044\001\002\000\004\016\236\001\002\000" +
    "\004\037\237\001\002\000\006\013\246\014\245\001\002" +
    "\000\004\021\241\001\002\000\004\022\242\001\002\000" +
    "\046\003\060\004\004\005\014\006\006\007\071\010\007" +
    "\011\065\012\041\020\074\027\047\030\067\031\054\033" +
    "\057\034\063\035\061\036\052\037\055\042\044\001\002" +
    "\000\004\023\244\001\002\000\050\003\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\020\uffcc" +
    "\023\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\042\uffcc\001\002\000\004\024\252" +
    "\001\002\000\006\013\247\024\250\001\002\000\004\021" +
    "\uffc9\001\002\000\004\042\251\001\002\000\004\021\uffc8" +
    "\001\002\000\004\042\253\001\002\000\004\021\uffc7\001" +
    "\002\000\004\046\255\001\002\000\004\017\256\001\002" +
    "\000\006\037\101\044\102\001\002\000\004\021\260\001" +
    "\002\000\004\016\261\001\002\000\050\003\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\020" +
    "\uffc6\023\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\042\uffc6\001\002\000\014\004" +
    "\004\005\014\006\006\010\007\021\ufff1\001\002\000\004" +
    "\021\264\001\002\000\004\016\265\001\002\000\012\004" +
    "\ufffc\005\ufffc\006\ufffc\010\ufffc\001\002\000\004\002\001" +
    "\001\002\000\014\003\273\004\004\005\014\006\006\010" +
    "\007\001\002\000\004\043\034\001\002\000\016\002\ufff7" +
    "\003\273\004\004\005\014\006\006\010\007\001\002\000" +
    "\004\002\uffff\001\002\000\006\020\304\021\305\001\002" +
    "\000\004\037\275\001\002\000\004\020\276\001\002\000" +
    "\014\004\004\005\014\006\006\010\007\021\ufff1\001\002" +
    "\000\004\021\300\001\002\000\004\022\301\001\002\000" +
    "\046\003\060\004\004\005\014\006\006\007\071\010\007" +
    "\011\065\012\041\020\074\027\047\030\067\031\054\033" +
    "\057\034\063\035\061\036\052\037\055\042\044\001\002" +
    "\000\004\023\303\001\002\000\016\002\ufff6\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\010\ufff6\001\002\000\014\004\004" +
    "\005\014\006\006\010\007\021\ufff1\001\002\000\004\022" +
    "\306\001\002\000\046\003\060\004\004\005\014\006\006" +
    "\007\071\010\007\011\065\012\041\020\074\027\047\030" +
    "\067\031\054\033\057\034\063\035\061\036\052\037\055" +
    "\042\044\001\002\000\004\023\310\001\002\000\016\002" +
    "\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\010\ufff4\001\002" +
    "\000\004\021\312\001\002\000\004\022\313\001\002\000" +
    "\046\003\060\004\004\005\014\006\006\007\071\010\007" +
    "\011\065\012\041\020\074\027\047\030\067\031\054\033" +
    "\057\034\063\035\061\036\052\037\055\042\044\001\002" +
    "\000\004\023\315\001\002\000\016\002\ufff5\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\010\ufff5\001\002\000\004\002\ufff8" +
    "\001\002\000\010\037\uffbc\043\uffbc\044\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\012\002\010\003\004\004\007\013\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\266\013\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\017\003\004" +
    "\004\007\013\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\023\010\021\013\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\023" +
    "\010\025\013\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\023\010" +
    "\035\013\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\011\055\012\076\013\077\014\045\015\044\016" +
    "\041\017\047\020\065\022\067\023\071\026\050\027\075" +
    "\033\074\034\042\035\061\036\072\037\052\040\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\055\012\211\013\077\014\045\015\044" +
    "\016\041\017\047\020\065\022\067\023\071\026\050\027" +
    "\075\033\074\034\042\035\061\036\072\037\052\040\063" +
    "\001\001\000\004\022\207\001\001\000\004\027\206\001" +
    "\001\000\002\001\001\000\004\042\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\130\001\001\000\002\001\001\000\012\022" +
    "\067\033\126\035\061\036\072\001\001\000\004\041\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\102\001\001\000\002\001\001\000\004\021\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\113\001\001\000\004\022\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\067\035\120\036" +
    "\072\001\001\000\004\042\123\001\001\000\002\001\001" +
    "\000\006\022\067\036\125\001\001\000\006\022\067\036" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\133\001\001\000\002\001\001\000\004\024\130" +
    "\001\001\000\046\011\055\012\135\013\077\014\045\015" +
    "\044\016\041\017\047\020\065\022\067\023\071\026\050" +
    "\027\075\033\074\034\042\035\061\036\072\037\052\040" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\150\025\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\055\012\143\013\077\014\045\015\044" +
    "\016\041\017\047\020\065\022\067\023\071\026\050\027" +
    "\075\033\074\034\042\035\061\036\072\037\052\040\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\011" +
    "\055\012\146\013\077\014\045\015\044\016\041\017\047" +
    "\020\065\022\067\023\071\026\050\027\075\033\074\034" +
    "\042\035\061\036\072\037\052\040\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\011\055\012\154" +
    "\013\077\014\045\015\044\016\041\017\047\020\065\022" +
    "\067\023\071\026\050\027\075\033\074\034\042\035\061" +
    "\036\072\037\052\040\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\160\001\001\000\002\001\001" +
    "\000\004\032\162\001\001\000\006\022\150\025\165\001" +
    "\001\000\002\001\001\000\006\022\150\025\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\150\025" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\055\012\172\013\077\014\045\015\044\016\041\017" +
    "\047\020\065\022\067\023\071\026\050\027\075\033\074" +
    "\034\042\035\061\036\072\037\052\040\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\067\033\213\035\061\036\072\001" +
    "\001\000\004\041\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\150\025\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\011\055\012\222\013\077" +
    "\014\045\015\044\016\041\017\047\020\065\022\067\023" +
    "\071\026\050\027\075\033\074\034\042\035\061\036\072" +
    "\037\052\040\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\232\001\001\000\002\001\001\000\006\022\150\025\234" +
    "\001\001\000\002\001\001\000\004\031\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\055\012\242\013\077\014\045\015\044\016\041\017" +
    "\047\020\065\022\067\023\071\026\050\027\075\033\074" +
    "\034\042\035\061\036\072\037\052\040\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\023" +
    "\010\262\013\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\271" +
    "\006\270\013\273\001\001\000\002\001\001\000\010\005" +
    "\315\006\270\013\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\023\010\276\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\011\055\012\301\013\077\014\045\015" +
    "\044\016\041\017\047\020\065\022\067\023\071\026\050" +
    "\027\075\033\074\034\042\035\061\036\072\037\052\040" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\023\010\310\013\022\001\001\000\002\001\001\000" +
    "\046\011\055\012\306\013\077\014\045\015\044\016\041" +
    "\017\047\020\065\022\067\023\071\026\050\027\075\033" +
    "\074\034\042\035\061\036\072\037\052\040\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\011\055\012\313\013\077\014\045" +
    "\015\044\016\041\017\047\020\065\022\067\023\071\026" +
    "\050\027\075\033\074\034\042\035\061\036\072\037\052" +
    "\040\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public CMiniProgram root = null;

    ArrayList<String> errores = new ArrayList();

    @Override
    public void report_error(String message, Object info) {
    	StringBuilder m = new StringBuilder("Syntax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
			if (s.sym == 0) {
				m.append(" : Part of declaration is missing");
			}else{
				m.append(" Unexpected token: "+ getToken(s.sym));
			}
		}
		System.err.println(m);
       
    }

    private String getToken(int id) {
        try {
	        Field [] field = sym.class.getFields();
	        for (int i = 0; i < field.length; i++) {
	          	if (field[i].getInt(null) == id) {
	                return field[i].getName();
	            }
	            
	        }
        } catch (Exception e) {          
        }
        return "UNKOWN";
    }
    

    public void report_fatal_error(String message, Object info) {
		//report_error(" Could not recover", info);
	}
    
    @Override
    public int error_sync_size(){
        return 1;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment ::= ID EQUALS AMPERSAND ID 
            {
              Assignment RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ida = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Assignment r = new Assignment((String)ida, (String)a, (String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment ::= ID EQUALS arithmeticExp 
            {
              Assignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExp aE = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Assignment r = new Assignment((String)id, aE);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignmentProc ::= assignment SEMICOLON 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Assignment r = new Assignment(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentProc",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opmult ::= ARTHMEXPMULT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (op == "*") {
					RESULT = "*";
				}else if (op == "/") {
					RESULT = "/";
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmult",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opsum ::= ARTHMEXPSUM 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (op == "+") {
					RESULT = "+";
				}else if (op == "-") {
					RESULT = "-";
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsum",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= value 
            {
              Factor RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Factor r = new Factor(val);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= LEFTPRNTH arithmeticExp RIGHTPRNTH 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				Factor r = new Factor(e);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(f);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= term ASTERISK factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int astleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int astright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ast = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(t, "*", f);
					RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term ::= term opmult factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opmultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opmult = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (opmult == "*") {
					Term r = new Term(t, "*", f);
					RESULT = r;
				}else if (opmult == "/") {
					Term r = new Term(t, "/", f);
					RESULT = r;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arithmeticExp ::= term 
            {
              ArithmeticExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ArithmeticExp r = new ArithmeticExp(t);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arithmeticExp ::= arithmeticExp opsum term 
            {
              ArithmeticExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opsumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opsum = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if (opsum == "+") {
							ArithmeticExp r = new ArithmeticExp(e, "+", t);
							RESULT = r;
						}else if (opsum == "-") {
							ArithmeticExp r = new ArithmeticExp(e, "-", t);
							RESULT = r;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // artExp ::= arithmeticExp SEMICOLON 
            {
              ArithmeticExp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp ae = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			ArithmeticExp r = new ArithmeticExp(ae);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("artExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= VOID 
            {
              Types RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= BOOLEAN 
            {
              Types RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)b);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= CHAR ASTERISK 
            {
              Types RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)c, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= INT ASTERISK 
            {
              Types RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)i, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= CHAR 
            {
              Types RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)c);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= INT 
            {
              Types RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)i);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= NULL 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)n, "null");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= BOOLTOF 
            {
              Value RESULT =null;
		int tFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)tF, "bool");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value ::= CONSTCHAR 
            {
              Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object character = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)character, "char");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= INTEGER 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)num, "int");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)id, "id");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA variables RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Printers r= new Printers((String)pf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // printers ::= PRINTF LEFTPRNTH CONSTSTR RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Printers r = new Printers((String)pf,sl);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA variables RIGHTPRNTH SEMICOLON 
            {
              Scanners RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Scanners r= new Scanners((String)sf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // forArthmExp ::= ID ARTHMEXPMULT EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // forArthmExp ::= ID ARTHMEXPSUM EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // forArthmExp ::= ID ARTHMEXPSUM ARTHMEXPSUM 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aES1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aES1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object aES1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aES2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aES2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aES2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES1, (String)aES2);
				if(aES1 != aES2){
					
				}
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inits ::= INT ID EQUALS value 
            {
              Inits RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Inits r = new Inits((String)i, (String)id,v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // forStatement ::= error forStatement 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token ';' expected");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Inits i = (Inits)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ForArthmExp aE = (ForArthmExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					ForStatement r = new ForStatement((String)f, i, c, aE, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					WhileStatement r = new WhileStatement((String)w, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // andOr ::= OR condition 
            {
              AndOR RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)o,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // andOr ::= AND condition 
            {
              AndOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)a,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operators ::= BOOLEXP 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (b == "<") {
					RESULT = "<";
				}else if (b == ">") {
					RESULT = ">";
				}else if (b == "<=") {
					RESULT = "<=";
				}else if (b == ">=") {
					RESULT = ">=";
				}else if (b == "!=") {
					RESULT = "!=";
				}else if (b == "==") {
					RESULT = "==";
				}else{
					
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operators",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condition ::= value operators value andOr 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndOR aO = (AndOR)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2,aO);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condition ::= value operators value 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elseStatement ::= ELSE ifStatement 
            {
              ElseStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifS = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ElseStatement r = new ElseStatement((String)e, ifS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elseStatement ::= ELSE LEFTCBRAC expressions RIGHTCBRAC 
            {
              ElseStatement RESULT =null;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					ElseStatement r = new ElseStatement((String)eS, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ifStatement ::= error RIGHTCBRAC 
            {
              IfStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifStatement ::= error LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifStatement ::= error RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifStatement ::= error LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifStatement ::= ifStatement elseStatement 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatement i = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseStatement eS = (ElseStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					IfStatement r = new IfStatement(i, eS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					IfStatement r = new IfStatement((String)i, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statements ::= forStatement 
            {
              Statements RESULT =null;
		int fSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStatement fS = (ForStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(fS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statements ::= whileStatement 
            {
              Statements RESULT =null;
		int wSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement wS = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(wS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statements ::= ifStatement 
            {
              Statements RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifs = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					Statements r = new Statements(ifs);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variables ::= AMPERSAND variables 
            {
              Variables RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  			Variables r = new Variables((String)a,v);
			  		RESULT = r;
	  			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variables ::= ID EQUALS value COMMA variables 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			  		Variables r = new Variables((String)id, val, v);
			  		RESULT = r;
		  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variables ::= ID EQUALS value 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  			Variables r = new Variables((String)id, val);
		  			RESULT = r;
		  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variables ::= ID COMMA variables 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  			Variables r = new Variables((String)id, v);
		  			RESULT = r;
		  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variables ::= ID 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Variables r = new Variables((String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variableDeclaration ::= error SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		
							System.err.println("Missing token ';' expected");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variableDeclaration ::= type variables SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							VariableDeclaration r = new VariableDeclaration(t, v);
							RESULT = r;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // returnStatement ::= RETURN value SEMICOLON 
            {
              ReturnStatement RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						ReturnStatement r = new ReturnStatement((String)ret, val);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= BREAK 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression((String)b);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= assignmentProc 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= returnStatement 
            {
              Expression RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(rs);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= artExp 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExp a = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= printers 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printers p = (Printers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(p);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= scanners 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Scanners s = (Scanners)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= statements 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= variableDeclaration 
            {
              Expression RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(vd);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressions ::= expression 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressions ::= expression expressions 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(es, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argument ::= type ID 
            {
              Argument RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Argument r = new Argument(t, (String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argumentList ::= 
            {
              ArgumentList RESULT =null;
		
					RESULT = null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argumentList ::= argument 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argumentList ::= argument COMMA argumentList 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(al, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= error RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= error LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function ::= type ID LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Function r = new Function(t, (String)id, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functionList ::= function 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(f);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionList ::= function functionList 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(fl, f);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // functionDeclaration ::= error SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing token ';'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // functionDeclaration ::= error RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionDeclaration ::= error LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionDeclaration ::= type ID LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					FunctionDeclaration r = new FunctionDeclaration(t, (String)id, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainClause ::= type MAIN LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              MainClause RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					MainClause r = new MainClause(t, (String)m, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cMiniProgram ::= error cMiniProgram 
            {
              CMiniProgram RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cMiniProgram ::= functionDeclaration mainClause functionList 
            {
              CMiniProgram RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(fd, mc, fl);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cMiniProgram ::= mainClause 
            {
              CMiniProgram RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(mc);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cMiniProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CMiniProgram start_val = (CMiniProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

