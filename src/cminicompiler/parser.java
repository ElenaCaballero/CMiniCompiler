
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 20 22:04:58 CST 2017
//----------------------------------------------------

package cminicompiler;

import java_cup.runtime.*;
import classes.*;
import java.util.ArrayList;
import java.lang.reflect.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 20 22:04:58 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\012\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\005\004\000\002\005\003\000\002" +
    "\006\012\000\002\006\012\000\002\006\012\000\002\006" +
    "\012\000\002\006\012\000\002\010\005\000\002\010\003" +
    "\000\002\010\002\000\002\007\004\000\002\007\004\000" +
    "\002\012\004\000\002\012\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\015\004\000" +
    "\002\015\003\000\002\022\005\000\002\022\003\000\002" +
    "\021\004\000\002\021\004\000\002\042\004\000\002\042" +
    "\003\000\002\040\004\000\002\040\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\024\011\000" +
    "\002\024\004\000\002\024\011\000\002\024\011\000\002" +
    "\024\011\000\002\024\011\000\002\024\011\000\002\025" +
    "\006\000\002\025\004\000\002\025\006\000\002\025\006" +
    "\000\002\026\005\000\002\026\006\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\045\003\000\002" +
    "\033\004\000\002\033\004\000\002\027\011\000\002\027" +
    "\011\000\002\027\011\000\002\027\011\000\002\027\011" +
    "\000\002\030\015\000\002\030\015\000\002\030\015\000" +
    "\002\030\015\000\002\030\015\000\002\031\006\000\002" +
    "\031\006\000\002\031\006\000\002\032\005\000\002\032" +
    "\006\000\002\032\006\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\017\011\000\002\020\007\000" +
    "\002\020\011\000\002\020\007\000\002\020\007\000\002" +
    "\020\007\000\002\020\011\000\002\020\011\000\002\020" +
    "\011\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\003\000\002\013\003\000\002\035\004\000\002\034" +
    "\005\000\002\034\003\000\002\036\005\000\002\036\005" +
    "\000\002\036\003\000\002\037\005\000\002\037\003\000" +
    "\002\043\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\014\003\013\004\004\005\014\006\006\010" +
    "\007\001\002\000\014\003\uff9e\037\uff9e\043\uff9e\044\uff9e" +
    "\045\u012f\001\002\000\004\002\000\001\002\000\012\003" +
    "\uff9a\037\uff9a\043\uff9a\044\uff9a\001\002\000\012\003\uff99" +
    "\037\uff99\043\uff99\044\uff99\001\002\000\012\004\004\005" +
    "\014\006\006\010\007\001\002\000\004\002\u0108\001\002" +
    "\000\010\003\033\037\032\043\034\001\002\000\016\003" +
    "\013\004\004\005\014\006\006\010\007\037\017\001\002" +
    "\000\014\003\uff9d\037\uff9d\043\uff9d\044\uff9d\045\015\001" +
    "\002\000\012\003\uff9b\037\uff9b\043\uff9b\044\uff9b\001\002" +
    "\000\004\002\ufffe\001\002\000\004\020\020\001\002\000" +
    "\014\004\004\005\014\006\006\010\007\021\uffee\001\002" +
    "\000\004\021\030\001\002\000\006\003\027\037\026\001" +
    "\002\000\010\003\uffef\017\024\021\uffef\001\002\000\016" +
    "\003\uffee\004\004\005\014\006\006\010\007\021\uffee\001" +
    "\002\000\006\003\ufff0\021\ufff0\001\002\000\010\003\uffed" +
    "\017\uffed\021\uffed\001\002\000\010\003\uffec\017\uffec\021" +
    "\uffec\001\002\000\004\016\031\001\002\000\012\004\ufffb" +
    "\005\ufffb\006\ufffb\010\ufffb\001\002\000\006\003\377\020" +
    "\376\001\002\000\004\020\372\001\002\000\004\020\035" +
    "\001\002\000\014\004\004\005\014\006\006\010\007\021" +
    "\uffee\001\002\000\004\021\037\001\002\000\004\022\040" +
    "\001\002\000\046\004\004\005\014\006\006\007\071\010" +
    "\007\011\065\012\041\020\074\027\047\030\067\031\054" +
    "\033\060\034\063\035\061\036\052\037\056\042\044\044" +
    "\055\001\002\000\006\003\354\020\353\001\002\000\052" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\020\uffe8\023\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\042\uffe8\044" +
    "\uffe8\001\002\000\052\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\020\uffe5\023\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\042\uffe5\044\uffe5\001\002\000\024\003\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\021\uffa2\025\uffa2\026\uffa2" +
    "\045\uffa2\001\002\000\052\003\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\020\uffe9\023\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\042\uffe9\044\uffe9\001\002\000\052\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\020\uffe4\023\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\042\uffe4\044\uffe4\001" +
    "\002\000\006\003\277\020\276\001\002\000\052\003\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\020\uffe7\023\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\042\uffe7\044\uffe7\001" +
    "\002\000\052\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\020\uffd4\023\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\042\uffd4\044\uffd4\001\002\000\024\003\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\021\uffa0\025\uffa0\026\uffa0\045\uffa0" +
    "\001\002\000\056\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\042\uffdc\044\uffdc\001\002\000\006" +
    "\003\246\020\245\001\002\000\006\037\101\044\055\001" +
    "\002\000\014\013\uffa3\014\uffa3\016\uffa3\024\106\045\uffa3" +
    "\001\002\000\052\003\uffea\004\004\005\014\006\006\007" +
    "\071\010\007\011\065\012\041\020\074\023\uffea\027\047" +
    "\030\067\031\054\033\060\034\063\035\061\036\052\037" +
    "\056\042\044\044\055\001\002\000\016\003\236\007\071" +
    "\035\061\036\052\037\112\042\044\001\002\000\024\003" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\021\uff9f\025\uff9f" +
    "\026\uff9f\045\uff9f\001\002\000\014\013\uff96\014\122\016" +
    "\uff96\021\uff96\045\123\001\002\000\052\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\020" +
    "\uffe3\023\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\042\uffe3\044\uffe3\001\002\000" +
    "\054\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\017\103\020\uffde\023\uffde\027\uffde\030" +
    "\uffde\031\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\042\uffde\044\uffde\001\002\000\006\003\211\020\210\001" +
    "\002\000\052\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\020\uffe6\023\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\042\uffe6\044\uffe6\001\002\000\006\003\146\020\145\001" +
    "\002\000\014\013\uff91\014\uff91\016\uff91\021\uff91\045\uff91" +
    "\001\002\000\024\003\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\021\uffa1\025\uffa1\026\uffa1\045\uffa1\001\002\000\054" +
    "\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\020\uffd5\023\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\134\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\042" +
    "\uffd5\044\uffd5\001\002\000\014\013\uff93\014\uff93\016\uff93" +
    "\021\uff93\045\uff93\001\002\000\016\007\071\020\074\035" +
    "\061\036\052\037\112\042\044\001\002\000\006\013\116" +
    "\016\130\001\002\000\052\003\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\020\uffd3\023\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\042\uffd3\044\uffd3\001\002\000\004\023\127" +
    "\001\002\000\006\037\101\044\055\001\002\000\006\016" +
    "\105\024\106\001\002\000\054\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\017\103\020" +
    "\uffdf\023\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\042\uffdf\044\uffdf\001\002\000" +
    "\006\037\101\044\055\001\002\000\056\003\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\023\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\042\uffdd\044" +
    "\uffdd\001\002\000\056\003\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\023\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\042\uffd8\044\uffd8\001\002\000" +
    "\020\007\071\020\074\035\061\036\052\037\112\042\044" +
    "\044\113\001\002\000\056\003\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\023\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\042\uffdb\044\uffdb\001\002" +
    "\000\056\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\042\uffd9\044\uffd9\001\002\000\006\013\116" +
    "\016\117\001\002\000\024\003\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\021\uffa3\025\uffa3\026\uffa3\045\uffa3\001\002" +
    "\000\004\037\114\001\002\000\004\016\115\001\002\000" +
    "\056\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\042\uffd6\044\uffd6\001\002\000\016\007\uff90\020" +
    "\uff90\035\uff90\036\uff90\037\uff90\042\uff90\001\002\000\056" +
    "\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\042\uffd7\044\uffd7\001\002\000\016\007\071\020\074" +
    "\035\061\036\052\037\112\042\044\001\002\000\014\013" +
    "\uff97\014\122\016\uff97\021\uff97\045\123\001\002\000\016" +
    "\007\uff8f\020\uff8f\035\uff8f\036\uff8f\037\uff8f\042\uff8f\001" +
    "\002\000\016\007\071\020\074\035\061\036\052\037\112" +
    "\042\044\001\002\000\016\007\071\020\074\035\061\036" +
    "\052\037\112\042\044\001\002\000\014\013\uff95\014\uff95" +
    "\016\uff95\021\uff95\045\uff95\001\002\000\014\013\uff94\014" +
    "\uff94\016\uff94\021\uff94\045\uff94\001\002\000\016\002\ufffd" +
    "\003\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\001\002\000" +
    "\052\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\020\uff98\023\uff98\027\uff98\030\uff98\031" +
    "\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\042\uff98" +
    "\044\uff98\001\002\000\006\013\116\021\132\001\002\000" +
    "\014\013\uff92\014\uff92\016\uff92\021\uff92\045\uff92\001\002" +
    "\000\054\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\020\uffd1\023\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\042\uffd1\044\uffd1\001\002\000\010\003\135\022\137" +
    "\031\054\001\002\000\046\004\004\005\014\006\006\007" +
    "\071\010\007\011\065\012\041\020\074\027\047\030\067" +
    "\031\054\033\060\034\063\035\061\036\052\037\056\042" +
    "\044\044\055\001\002\000\054\003\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\020\uffca\023" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\134\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\042\uffca\044\uffca\001\002\000" +
    "\046\004\004\005\014\006\006\007\071\010\007\011\065" +
    "\012\041\020\074\027\047\030\067\031\054\033\060\034" +
    "\063\035\061\036\052\037\056\042\044\044\055\001\002" +
    "\000\006\003\141\023\142\001\002\000\054\003\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\020\uffc8\023\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\042\uffc8\044\uffc8" +
    "\001\002\000\054\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\020\uffcb\023\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\042\uffcb\044\uffcb\001\002\000\004\023\144" +
    "\001\002\000\054\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\020\uffc9\023\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\042\uffc9\044\uffc9\001\002\000\016\003\147" +
    "\007\071\035\061\036\052\037\112\042\044\001\002\000" +
    "\016\003\147\007\071\035\061\036\052\037\112\042\044" +
    "\001\002\000\004\015\160\001\002\000\006\003\157\015" +
    "\160\001\002\000\004\021\152\001\002\000\004\022\153" +
    "\001\002\000\046\004\004\005\014\006\006\007\071\010" +
    "\007\011\065\012\041\020\074\027\047\030\067\031\054" +
    "\033\060\034\063\035\061\036\052\037\056\042\044\044" +
    "\055\001\002\000\004\023\155\001\002\000\052\003\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\020\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\042\uffbe\044\uffbe\001" +
    "\002\000\016\003\162\007\071\035\061\036\052\037\112" +
    "\042\044\001\002\000\014\007\071\035\061\036\052\037" +
    "\112\042\044\001\002\000\016\003\uffc2\007\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\042\uffc2\001\002\000\010\003\uffc3\016" +
    "\uffc3\021\uffc3\001\002\000\010\003\uffc4\016\uffc4\021\uffc4" +
    "\001\002\000\014\003\uffc7\016\uffc7\021\uffc7\025\166\026" +
    "\164\001\002\000\016\003\147\007\071\035\061\036\052" +
    "\037\112\042\044\001\002\000\010\003\uffc6\016\uffc6\021" +
    "\uffc6\001\002\000\016\003\147\007\071\035\061\036\052" +
    "\037\112\042\044\001\002\000\010\003\uffc0\016\uffc0\021" +
    "\uffc0\001\002\000\010\003\uffc1\016\uffc1\021\uffc1\001\002" +
    "\000\014\007\071\035\061\036\052\037\112\042\044\001" +
    "\002\000\010\003\uffc5\016\uffc5\021\uffc5\001\002\000\006" +
    "\003\174\021\175\001\002\000\004\022\205\001\002\000" +
    "\006\003\176\022\177\001\002\000\046\004\004\005\014" +
    "\006\006\007\071\010\007\011\065\012\041\020\074\027" +
    "\047\030\067\031\054\033\060\034\063\035\061\036\052" +
    "\037\056\042\044\044\055\001\002\000\046\004\004\005" +
    "\014\006\006\007\071\010\007\011\065\012\041\020\074" +
    "\027\047\030\067\031\054\033\060\034\063\035\061\036" +
    "\052\037\056\042\044\044\055\001\002\000\006\003\201" +
    "\023\202\001\002\000\052\003\uffbb\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\020\uffbb\023\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\042\uffbb\044\uffbb\001\002\000\052\003\uffbf" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\020\uffbf\023\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf\044\uffbf\001" +
    "\002\000\004\023\204\001\002\000\052\003\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\020" +
    "\uffbc\023\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\042\uffbc\044\uffbc\001\002\000" +
    "\046\004\004\005\014\006\006\007\071\010\007\011\065" +
    "\012\041\020\074\027\047\030\067\031\054\033\060\034" +
    "\063\035\061\036\052\037\056\042\044\044\055\001\002" +
    "\000\004\023\207\001\002\000\052\003\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\020\uffbd" +
    "\023\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\042\uffbd\044\uffbd\001\002\000\004" +
    "\046\221\001\002\000\004\046\212\001\002\000\006\017" +
    "\213\021\214\001\002\000\006\037\101\044\055\001\002" +
    "\000\004\016\215\001\002\000\052\003\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\020\uffa9" +
    "\023\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\042\uffa9\044\uffa9\001\002\000\006" +
    "\017\103\021\217\001\002\000\004\016\220\001\002\000" +
    "\052\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\020\uffa6\023\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\042\uffa6" +
    "\044\uffa6\001\002\000\010\003\223\017\222\021\224\001" +
    "\002\000\006\037\101\044\055\001\002\000\004\016\227" +
    "\001\002\000\006\003\226\016\225\001\002\000\052\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\020\uffab\023\uffab\027\uffab\030\uffab\031\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\042\uffab\044\uffab" +
    "\001\002\000\052\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\020\uffa7\023\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\042\uffa7\044\uffa7\001\002\000\052\003\uffa8\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\020" +
    "\uffa8\023\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\042\uffa8\044\uffa8\001\002\000" +
    "\010\003\231\017\103\021\232\001\002\000\004\016\235" +
    "\001\002\000\006\003\234\016\233\001\002\000\052\003" +
    "\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\020\uffaa\023\uffaa\027\uffaa\030\uffaa\031\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\042\uffaa\044\uffaa" +
    "\001\002\000\052\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\020\uffa4\023\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\042\uffa4\044\uffa4\001\002\000\052\003\uffa5\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\020" +
    "\uffa5\023\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\042\uffa5\044\uffa5\001\002\000" +
    "\004\016\242\001\002\000\006\003\241\016\240\001\002" +
    "\000\052\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\020\uffe2\023\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\042" +
    "\uffe2\044\uffe2\001\002\000\052\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\020\uffe0\023" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\042\uffe0\044\uffe0\001\002\000\052\003" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\020\uffe1\023\uffe1\027\uffe1\030\uffe1\031\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\042\uffe1\044\uffe1" +
    "\001\002\000\006\003\uffeb\023\uffeb\001\002\000\056\003" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\017\uffda\020\uffda\021\uffda\023\uffda\027\uffda\030" +
    "\uffda\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\042\uffda\044\uffda\001\002\000\016\003\254\007\071\035" +
    "\061\036\052\037\112\042\044\001\002\000\016\003\147" +
    "\007\071\035\061\036\052\037\112\042\044\001\002\000" +
    "\004\021\250\001\002\000\004\022\251\001\002\000\046" +
    "\004\004\005\014\006\006\007\071\010\007\011\065\012" +
    "\041\020\074\027\047\030\067\031\054\033\060\034\063" +
    "\035\061\036\052\037\056\042\044\044\055\001\002\000" +
    "\004\023\253\001\002\000\054\003\uffd0\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\020\uffd0\023" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\042\uffd0\044\uffd0\001\002\000" +
    "\006\015\160\021\272\001\002\000\006\003\256\021\257" +
    "\001\002\000\004\022\267\001\002\000\006\003\260\022" +
    "\261\001\002\000\046\004\004\005\014\006\006\007\071" +
    "\010\007\011\065\012\041\020\074\027\047\030\067\031" +
    "\054\033\060\034\063\035\061\036\052\037\056\042\044" +
    "\044\055\001\002\000\046\004\004\005\014\006\006\007" +
    "\071\010\007\011\065\012\041\020\074\027\047\030\067" +
    "\031\054\033\060\034\063\035\061\036\052\037\056\042" +
    "\044\044\055\001\002\000\006\003\263\023\264\001\002" +
    "\000\054\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\020\uffcd\023\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\042\uffcd\044\uffcd\001\002\000\054\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\020" +
    "\uffd2\023\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\042\uffd2\044\uffd2\001" +
    "\002\000\004\023\266\001\002\000\054\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\020" +
    "\uffce\023\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\042\uffce\044\uffce\001" +
    "\002\000\046\004\004\005\014\006\006\007\071\010\007" +
    "\011\065\012\041\020\074\027\047\030\067\031\054\033" +
    "\060\034\063\035\061\036\052\037\056\042\044\044\055" +
    "\001\002\000\004\023\271\001\002\000\054\003\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\020\uffcf\023\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\042\uffcf\044\uffcf" +
    "\001\002\000\004\022\273\001\002\000\046\004\004\005" +
    "\014\006\006\007\071\010\007\011\065\012\041\020\074" +
    "\027\047\030\067\031\054\033\060\034\063\035\061\036" +
    "\052\037\056\042\044\044\055\001\002\000\004\023\275" +
    "\001\002\000\054\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\020\uffcc\023\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\042\uffcc\044\uffcc\001\002\000\004\004\301" +
    "\001\002\000\004\004\301\001\002\000\004\016\312\001" +
    "\002\000\006\003\303\037\302\001\002\000\006\003\306" +
    "\024\307\001\002\000\004\024\304\001\002\000\014\007" +
    "\071\035\061\036\052\037\112\042\044\001\002\000\004" +
    "\016\uffb3\001\002\000\014\007\071\035\061\036\052\037" +
    "\112\042\044\001\002\000\014\007\071\035\061\036\052" +
    "\037\112\042\044\001\002\000\004\016\uffb5\001\002\000" +
    "\004\016\uffb4\001\002\000\016\003\147\007\071\035\061" +
    "\036\052\037\112\042\044\001\002\000\004\016\314\001" +
    "\002\000\004\037\315\001\002\000\006\013\324\014\323" +
    "\001\002\000\004\021\317\001\002\000\004\022\320\001" +
    "\002\000\046\004\004\005\014\006\006\007\071\010\007" +
    "\011\065\012\041\020\074\027\047\030\067\031\054\033" +
    "\060\034\063\035\061\036\052\037\056\042\044\044\055" +
    "\001\002\000\004\023\322\001\002\000\052\003\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\020\uffb9\023\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\042\uffb9\044\uffb9\001\002" +
    "\000\004\024\330\001\002\000\006\013\325\024\326\001" +
    "\002\000\006\003\uffb2\021\uffb2\001\002\000\004\042\327" +
    "\001\002\000\006\003\uffb1\021\uffb1\001\002\000\004\042" +
    "\331\001\002\000\006\003\uffb0\021\uffb0\001\002\000\004" +
    "\016\333\001\002\000\016\003\147\007\071\035\061\036" +
    "\052\037\112\042\044\001\002\000\004\016\335\001\002" +
    "\000\004\037\315\001\002\000\006\003\337\021\340\001" +
    "\002\000\004\022\350\001\002\000\006\003\341\022\342" +
    "\001\002\000\046\004\004\005\014\006\006\007\071\010" +
    "\007\011\065\012\041\020\074\027\047\030\067\031\054" +
    "\033\060\034\063\035\061\036\052\037\056\042\044\044" +
    "\055\001\002\000\046\004\004\005\014\006\006\007\071" +
    "\010\007\011\065\012\041\020\074\027\047\030\067\031" +
    "\054\033\060\034\063\035\061\036\052\037\056\042\044" +
    "\044\055\001\002\000\006\003\344\023\345\001\002\000" +
    "\052\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\020\uffb6\023\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\042\uffb6" +
    "\044\uffb6\001\002\000\052\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\020\uffba\023\uffba" +
    "\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\042\uffba\044\uffba\001\002\000\004\023\347" +
    "\001\002\000\052\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\020\uffb7\023\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\042\uffb7\044\uffb7\001\002\000\046\004\004\005\014" +
    "\006\006\007\071\010\007\011\065\012\041\020\074\027" +
    "\047\030\067\031\054\033\060\034\063\035\061\036\052" +
    "\037\056\042\044\044\055\001\002\000\004\023\352\001" +
    "\002\000\052\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\020\uffb8\023\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\042\uffb8\044\uffb8\001\002\000\004\046\362\001\002\000" +
    "\004\046\355\001\002\000\004\017\356\001\002\000\006" +
    "\037\101\044\055\001\002\000\006\017\103\021\360\001" +
    "\002\000\004\016\361\001\002\000\052\003\uffae\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\020" +
    "\uffae\023\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\042\uffae\044\uffae\001\002\000" +
    "\004\017\363\001\002\000\006\037\101\044\055\001\002" +
    "\000\010\003\365\017\103\021\366\001\002\000\004\016" +
    "\371\001\002\000\006\003\370\016\367\001\002\000\052" +
    "\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\020\uffaf\023\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\042\uffaf\044" +
    "\uffaf\001\002\000\052\003\uffac\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\020\uffac\023\uffac\027" +
    "\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\042\uffac\044\uffac\001\002\000\052\003\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\020\uffad\023\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\042\uffad\044\uffad\001\002" +
    "\000\014\004\004\005\014\006\006\010\007\021\uffee\001" +
    "\002\000\004\021\374\001\002\000\004\016\375\001\002" +
    "\000\012\004\ufffa\005\ufffa\006\ufffa\010\ufffa\001\002\000" +
    "\016\003\uffee\004\004\005\014\006\006\010\007\021\uffee" +
    "\001\002\000\014\004\004\005\014\006\006\010\007\021" +
    "\uffee\001\002\000\004\021\u0101\001\002\000\004\016\u0102" +
    "\001\002\000\012\004\ufff9\005\ufff9\006\ufff9\010\ufff9\001" +
    "\002\000\006\003\u0104\021\u0105\001\002\000\004\016\u0107" +
    "\001\002\000\004\016\u0106\001\002\000\012\004\ufffc\005" +
    "\ufffc\006\ufffc\010\ufffc\001\002\000\012\004\ufff8\005\ufff8" +
    "\006\ufff8\010\ufff8\001\002\000\004\002\001\001\002\000" +
    "\014\003\u010d\004\004\005\014\006\006\010\007\001\002" +
    "\000\004\043\034\001\002\000\004\002\uffff\001\002\000" +
    "\016\002\ufff6\003\u010d\004\004\005\014\006\006\010\007" +
    "\001\002\000\004\037\u0127\001\002\000\006\003\u0110\037" +
    "\u010f\001\002\000\006\003\u0118\020\u0117\001\002\000\004" +
    "\020\u0111\001\002\000\014\004\004\005\014\006\006\010" +
    "\007\021\uffee\001\002\000\004\021\u0113\001\002\000\004" +
    "\022\u0114\001\002\000\046\004\004\005\014\006\006\007" +
    "\071\010\007\011\065\012\041\020\074\027\047\030\067" +
    "\031\054\033\060\034\063\035\061\036\052\037\056\042" +
    "\044\044\055\001\002\000\004\023\u0116\001\002\000\016" +
    "\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\010\ufff4\001" +
    "\002\000\016\003\uffee\004\004\005\014\006\006\010\007" +
    "\021\uffee\001\002\000\014\004\004\005\014\006\006\010" +
    "\007\021\uffee\001\002\000\004\021\u011a\001\002\000\004" +
    "\022\u011b\001\002\000\046\004\004\005\014\006\006\007" +
    "\071\010\007\011\065\012\041\020\074\027\047\030\067" +
    "\031\054\033\060\034\063\035\061\036\052\037\056\042" +
    "\044\044\055\001\002\000\004\023\u011d\001\002\000\016" +
    "\002\ufff2\003\ufff2\004\ufff2\005\ufff2\006\ufff2\010\ufff2\001" +
    "\002\000\006\003\u011f\021\u0120\001\002\000\004\022\u0124" +
    "\001\002\000\004\022\u0121\001\002\000\046\004\004\005" +
    "\014\006\006\007\071\010\007\011\065\012\041\020\074" +
    "\027\047\030\067\031\054\033\060\034\063\035\061\036" +
    "\052\037\056\042\044\044\055\001\002\000\004\023\u0123" +
    "\001\002\000\016\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\010\ufff5\001\002\000\046\004\004\005\014\006\006" +
    "\007\071\010\007\011\065\012\041\020\074\027\047\030" +
    "\067\031\054\033\060\034\063\035\061\036\052\037\056" +
    "\042\044\044\055\001\002\000\004\023\u0126\001\002\000" +
    "\016\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\010\ufff1" +
    "\001\002\000\004\020\u0128\001\002\000\014\004\004\005" +
    "\014\006\006\010\007\021\uffee\001\002\000\004\021\u012a" +
    "\001\002\000\004\022\u012b\001\002\000\046\004\004\005" +
    "\014\006\006\007\071\010\007\011\065\012\041\020\074" +
    "\027\047\030\067\031\054\033\060\034\063\035\061\036" +
    "\052\037\056\042\044\044\055\001\002\000\004\023\u012d" +
    "\001\002\000\016\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\010\ufff3\001\002\000\004\002\ufff7\001\002\000\012" +
    "\003\uff9c\037\uff9c\043\uff9c\044\uff9c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\012\002\010\003\004\004\007\013\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\u0108\013\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\015\003\004" +
    "\004\007\013\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\022" +
    "\010\020\013\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\022\010\024\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\022\010" +
    "\035\013\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\011\056\012\076\013\077\014\045\015\044\016" +
    "\041\017\047\020\065\021\052\022\063\023\067\024\071" +
    "\027\050\030\075\034\074\035\042\036\061\037\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\243\001\001\000\004\042\106\001\001\000\046\011\056" +
    "\012\242\013\077\014\045\015\044\016\041\017\047\020" +
    "\065\021\052\022\063\023\067\024\071\027\050\030\075" +
    "\034\074\035\042\036\061\037\072\001\001\000\004\023" +
    "\236\001\001\000\002\001\001\000\004\044\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\132\001\001\000\002\001\001\000" +
    "\012\023\067\034\130\036\061\037\072\001\001\000\004" +
    "\043\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\052\022\101\001\001\000\004\042\106\001\001" +
    "\000\002\001\001\000\004\021\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\067\034\110\036\061" +
    "\037\072\040\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\067\036\120\037\072" +
    "\001\001\000\004\044\123\001\001\000\002\001\001\000" +
    "\006\023\067\037\125\001\001\000\006\023\067\037\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\135\001\001\000" +
    "\046\011\056\012\142\013\077\014\045\015\044\016\041" +
    "\017\047\020\065\021\052\022\063\023\067\024\071\027" +
    "\050\030\075\034\074\035\042\036\061\037\072\001\001" +
    "\000\004\025\132\001\001\000\046\011\056\012\137\013" +
    "\077\014\045\015\044\016\041\017\047\020\065\021\052" +
    "\022\063\023\067\024\071\027\050\030\075\034\074\035" +
    "\042\036\061\037\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\147\026\172\001\001\000\006\023\147" +
    "\026\150\001\001\000\004\045\170\001\001\000\004\045" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\056\012\153\013\077\014\045\015\044\016\041\017" +
    "\047\020\065\021\052\022\063\023\067\024\071\027\050" +
    "\030\075\034\074\035\042\036\061\037\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\162\001\001" +
    "\000\004\023\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\164\001\001\000\006" +
    "\023\147\026\167\001\001\000\002\001\001\000\006\023" +
    "\147\026\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\011\056" +
    "\012\202\013\077\014\045\015\044\016\041\017\047\020" +
    "\065\021\052\022\063\023\067\024\071\027\050\030\075" +
    "\034\074\035\042\036\061\037\072\001\001\000\046\011" +
    "\056\012\177\013\077\014\045\015\044\016\041\017\047" +
    "\020\065\021\052\022\063\023\067\024\071\027\050\030" +
    "\075\034\074\035\042\036\061\037\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\011\056\012\205\013\077" +
    "\014\045\015\044\016\041\017\047\020\065\021\052\022" +
    "\063\023\067\024\071\027\050\030\075\034\074\035\042" +
    "\036\061\037\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\052\022\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\052\022\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\147\026" +
    "\254\001\001\000\006\023\147\026\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\011\056\012\251\013" +
    "\077\014\045\015\044\016\041\017\047\020\065\021\052" +
    "\022\063\023\067\024\071\027\050\030\075\034\074\035" +
    "\042\036\061\037\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\011\056\012\264" +
    "\013\077\014\045\015\044\016\041\017\047\020\065\021" +
    "\052\022\063\023\067\024\071\027\050\030\075\034\074" +
    "\035\042\036\061\037\072\001\001\000\046\011\056\012" +
    "\261\013\077\014\045\015\044\016\041\017\047\020\065" +
    "\021\052\022\063\023\067\024\071\027\050\030\075\034" +
    "\074\035\042\036\061\037\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\011\056\012\267\013\077\014\045" +
    "\015\044\016\041\017\047\020\065\021\052\022\063\023" +
    "\067\024\071\027\050\030\075\034\074\035\042\036\061" +
    "\037\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\011\056\012\273\013\077\014\045" +
    "\015\044\016\041\017\047\020\065\021\052\022\063\023" +
    "\067\024\071\027\050\030\075\034\074\035\042\036\061" +
    "\037\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\331\001\001\000\004\031\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\304\001\001\000\002\001\001\000\004" +
    "\023\310\001\001\000\004\023\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\147\026\312\001\001" +
    "\000\002\001\001\000\004\032\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\011\056" +
    "\012\320\013\077\014\045\015\044\016\041\017\047\020" +
    "\065\021\052\022\063\023\067\024\071\027\050\030\075" +
    "\034\074\035\042\036\061\037\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\147\026\333\001\001\000\002\001\001\000\004\032" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\011\056\012\345\013\077\014\045\015" +
    "\044\016\041\017\047\020\065\021\052\022\063\023\067" +
    "\024\071\027\050\030\075\034\074\035\042\036\061\037" +
    "\072\001\001\000\046\011\056\012\342\013\077\014\045" +
    "\015\044\016\041\017\047\020\065\021\052\022\063\023" +
    "\067\024\071\027\050\030\075\034\074\035\042\036\061" +
    "\037\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\011\056\012\350\013\077\014\045\015\044\016\041\017" +
    "\047\020\065\021\052\022\063\023\067\024\071\027\050" +
    "\030\075\034\074\035\042\036\061\037\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\052\022\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\052\022\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\022\010\372\013\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\022\010\u0102\013" +
    "\021\001\001\000\010\007\022\010\377\013\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\u010a\006\u010b\013\u010d\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\u012d\006\u010b\013\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\022\010\u0111\013\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\011\056\012\u0114" +
    "\013\077\014\045\015\044\016\041\017\047\020\065\021" +
    "\052\022\063\023\067\024\071\027\050\030\075\034\074" +
    "\035\042\036\061\037\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\022\010\u011d\013\021\001\001" +
    "\000\010\007\022\010\u0118\013\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\011\056\012\u011b\013\077" +
    "\014\045\015\044\016\041\017\047\020\065\021\052\022" +
    "\063\023\067\024\071\027\050\030\075\034\074\035\042" +
    "\036\061\037\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\011\056\012\u0121\013\077\014\045\015\044\016" +
    "\041\017\047\020\065\021\052\022\063\023\067\024\071" +
    "\027\050\030\075\034\074\035\042\036\061\037\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\011\056" +
    "\012\u0124\013\077\014\045\015\044\016\041\017\047\020" +
    "\065\021\052\022\063\023\067\024\071\027\050\030\075" +
    "\034\074\035\042\036\061\037\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\022" +
    "\010\u0128\013\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\011\056\012\u012b\013\077\014\045\015\044" +
    "\016\041\017\047\020\065\021\052\022\063\023\067\024" +
    "\071\027\050\030\075\034\074\035\042\036\061\037\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public CMiniProgram root = null;

    ArrayList<String> errores = new ArrayList();

    @Override
    public void report_error(String message, Object info) {
    	StringBuilder m = new StringBuilder("Syntax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
			if (s.sym == 0) {
				m.append(" : Part of declaration (main or function) is missing");
			}else{
				m.append(" Unexpected token: "+ getToken(s.sym));
			}
		}
		System.err.println(m);
       
    }

    private String getToken(int id) {
        try {
	        Field [] field = sym.class.getFields();
	        for (int i = 0; i < field.length; i++) {
	          	if (field[i].getInt(null) == id) {
	                return field[i].getName();
	            }
	            
	        }
        } catch (Exception e) {          
        }
        return "UNKOWN";
    }
    

    public void report_fatal_error(String message, Object info) {
		//report_error(" Could not recover", info);
	}
    
    @Override
    public int error_sync_size(){
        return 1;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opmult ::= ARTHMEXPMULT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (op == "*") {
					RESULT = "*";
				}else if (op == "/") {
					RESULT = "/";
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmult",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opsum ::= ARTHMEXPSUM 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (op == "+") {
					RESULT = "+";
				}else if (op == "-") {
					RESULT = "-";
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsum",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= value 
            {
              Factor RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Factor r = new Factor(val);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= LEFTPRNTH arithmeticExp RIGHTPRNTH 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				Factor r = new Factor(e);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(f);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term ::= term ASTERISK factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int astleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int astright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ast = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(t, "*", f);
					RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // term ::= term opmult factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opmultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opmult = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (opmult == "*") {
					Term r = new Term(t, "*", f);
					RESULT = r;
				}else if (opmult == "/") {
					Term r = new Term(t, "/", f);
					RESULT = r;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arithmeticExp ::= term 
            {
              ArithmeticExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ArithmeticExp r = new ArithmeticExp(t);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arithmeticExp ::= arithmeticExp opsum term 
            {
              ArithmeticExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opsumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opsum = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if (opsum == "+") {
							ArithmeticExp r = new ArithmeticExp(e, "+", t);
							RESULT = r;
						}else if (opsum == "-") {
							ArithmeticExp r = new ArithmeticExp(e, "-", t);
							RESULT = r;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // artExp ::= arithmeticExp SEMICOLON 
            {
              ArithmeticExp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp ae = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			ArithmeticExp r = new ArithmeticExp(ae);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("artExp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= VOID 
            {
              Types RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= BOOLEAN 
            {
              Types RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)b);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= CHAR ASTERISK 
            {
              Types RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)c, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type ::= INT ASTERISK 
            {
              Types RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)i, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type ::= CHAR 
            {
              Types RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)c);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type ::= INT 
            {
              Types RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Types r = new Types((String)i);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // value ::= NULL 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)n, "null");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // value ::= BOOLTOF 
            {
              Value RESULT =null;
		int tFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)tF, "bool");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // value ::= CONSTCHAR 
            {
              Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object character = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)character, "char");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // value ::= INTEGER 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)num, "int");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // value ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)id, "id");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH error 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ';'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA varDeclList error SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ')'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // printers ::= PRINTF error CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token '('");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // printers ::= PRINTF LEFTPRNTH CONSTSTR RIGHTPRNTH error 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ';'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // printers ::= PRINTF LEFTPRNTH CONSTSTR error SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token ')'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // printers ::= PRINTF error CONSTSTR RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		
				System.err.println("Missing token '('");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Printers r= new Printers((String)pf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // printers ::= PRINTF LEFTPRNTH CONSTSTR RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Printers r = new Printers((String)pf,sl);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH error 
            {
              Scanners RESULT =null;
		
				System.err.println("Missing token ';'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA varDeclList error SEMICOLON 
            {
              Scanners RESULT =null;
		
				System.err.println("Missing token ')'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // scanners ::= SCANF error CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Scanners RESULT =null;
		
				System.err.println("Missing token '('");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA varDeclList RIGHTPRNTH SEMICOLON 
            {
              Scanners RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Scanners r= new Scanners((String)sf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // forArthmExp ::= ID ARTHMEXPMULT EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // forArthmExp ::= ID ARTHMEXPSUM EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forArthmExp ::= ID ARTHMEXPSUM ARTHMEXPSUM 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aES1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aES1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object aES1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aES2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aES2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aES2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES1, (String)aES2);
				if(aES1 != aES2){
					
				}
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inits ::= INT error EQUALS value 
            {
              Inits RESULT =null;
		
			System.err.println("Expected an id");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inits ::= INT ID error value 
            {
              Inits RESULT =null;
		
			System.err.println("Missing token '='");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inits ::= INT ID EQUALS value 
            {
              Inits RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Inits r = new Inits((String)i, (String)id,v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions error 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH error expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp error LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // forStatement ::= FOR error inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Inits i = (Inits)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ForArthmExp aE = (ForArthmExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					ForStatement r = new ForStatement((String)f, i, c, aE, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions error 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH error expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // whileStatement ::= WHILE LEFTPRNTH condition error LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // whileStatement ::= WHILE error condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					WhileStatement r = new WhileStatement((String)w, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // andOr ::= OR condition 
            {
              AndOR RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)o,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // andOr ::= AND condition 
            {
              AndOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)a,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operators ::= BOOLEXP 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (b == "<") {
					RESULT = "<";
				}else if (b == ">") {
					RESULT = ">";
				}else if (b == "<=") {
					RESULT = "<=";
				}else if (b == ">=") {
					RESULT = ">=";
				}else if (b == "!=") {
					RESULT = "!=";
				}else if (b == "==") {
					RESULT = "==";
				}else{
					
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operators",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condition ::= value error value 
            {
              Condition RESULT =null;
		
				System.err.println("Expected an operator");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condition ::= value operators error 
            {
              Condition RESULT =null;
		
				System.err.println("Expected a final value");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= error operators value 
            {
              Condition RESULT =null;
		
				System.err.println("Expected an initial value");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= value operators value andOr 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndOR aO = (AndOR)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2,aO);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= value operators value 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elseStatement ::= ELSE LEFTCBRAC expressions error 
            {
              ElseStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elseStatement ::= ELSE error expressions RIGHTCBRAC 
            {
              ElseStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elseStatement ::= ELSE ifStatement 
            {
              ElseStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifS = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ElseStatement r = new ElseStatement((String)e, ifS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elseStatement ::= ELSE LEFTCBRAC expressions RIGHTCBRAC 
            {
              ElseStatement RESULT =null;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					ElseStatement r = new ElseStatement((String)eS, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ifStatement ::= IF LEFTPRNTH error RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("IF expected a condition");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions error 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token '}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH error expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token '{'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifStatement ::= IF LEFTPRNTH condition error LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifStatement ::= IF error condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifStatement ::= ifStatement elseStatement 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatement i = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseStatement eS = (ElseStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					IfStatement r = new IfStatement(i, eS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					IfStatement r = new IfStatement((String)i, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statements ::= forStatement 
            {
              Statements RESULT =null;
		int fSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStatement fS = (ForStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(fS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statements ::= whileStatement 
            {
              Statements RESULT =null;
		int wSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement wS = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(wS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statements ::= ifStatement 
            {
              Statements RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifs = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					Statements r = new Statements(ifs);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment ::= AMPERSAND ID SEMICOLON 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Assignment r = new Assignment((String)a, (String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= arithmeticExp SEMICOLON 
            {
              Assignment RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp aE = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Assignment r = new Assignment(aE);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignmentProc ::= SEMICOLON 
            {
              AssignmentProc RESULT =null;
		
						RESULT = null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentProc",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignmentProc ::= EQUALS assignment 
            {
              AssignmentProc RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						AssignmentProc r = new AssignmentProc(a);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentProc",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variables ::= AMPERSAND variables 
            {
              Variables RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  			Variables r = new Variables((String)a, v);
			  		RESULT = r;
	  			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variables ::= ID assignmentProc 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignmentProc a = (AssignmentProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Variables r = new Variables((String)id, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varDeclList ::= variables 
            {
              VarDeclarationList RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables vars = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					VarDeclarationList r = new VarDeclarationList(vars);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varDeclList ::= varDeclList COMMA variables 
            {
              VarDeclarationList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables vars = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					VarDeclarationList r = new VarDeclarationList(v,vars);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variableDeclaration ::= varDeclList 
            {
              VariableDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							VariableDeclaration r = new VariableDeclaration(v);
							RESULT = r;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variableDeclaration ::= type varDeclList 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclarationList v = (VarDeclarationList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							VariableDeclaration r = new VariableDeclaration(t, v);
							RESULT = r;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // returnStatement ::= RETURN value error 
            {
              ReturnStatement RESULT =null;
		
						System.err.println("Missing token, expected ';'");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // returnStatement ::= RETURN error SEMICOLON 
            {
              ReturnStatement RESULT =null;
		
						System.err.println("Missing return value");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // returnStatement ::= RETURN value SEMICOLON 
            {
              ReturnStatement RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						ReturnStatement r = new ReturnStatement((String)ret, val);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= BREAK 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression((String)b);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= returnStatement 
            {
              Expression RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(rs);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= artExp 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExp a = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= printers 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printers p = (Printers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(p);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= scanners 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Scanners s = (Scanners)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= statements 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= variableDeclaration 
            {
              Expression RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(vd);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= expression 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions ::= expression expressions 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(es, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argument ::= type error 
            {
              Argument RESULT =null;
		  
					System.err.println("Missing argument type");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument ::= type ID 
            {
              Argument RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Argument r = new Argument(t, (String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argumentList ::= 
            {
              ArgumentList RESULT =null;
		
					RESULT = null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argumentList ::= argument 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argumentList ::= argument COMMA argumentList 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(al, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= type ID LEFTPRNTH argumentList error LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= type ID error argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= error ID LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing function type");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= type error LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		
					System.err.println("Missing Id");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= type ID LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Function r = new Function(t, (String)id, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // functionList ::= function 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(f);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functionList ::= function functionList 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(fl, f);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionDeclaration ::= type ID LEFTPRNTH argumentList error SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing token ')'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // functionDeclaration ::= type ID error argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing token '('");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // functionDeclaration ::= type error LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing id");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionDeclaration ::= error ID LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		
					System.err.println("Missing function type");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionDeclaration ::= type ID LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					FunctionDeclaration r = new FunctionDeclaration(t, (String)id, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainClause ::= type MAIN LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              MainClause RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Types t = (Types)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					MainClause r = new MainClause(t, (String)m, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cMiniProgram ::= error cMiniProgram 
            {
              CMiniProgram RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cMiniProgram ::= functionDeclaration mainClause functionList 
            {
              CMiniProgram RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(fd, mc, fl);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cMiniProgram ::= mainClause 
            {
              CMiniProgram RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(mc);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cMiniProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CMiniProgram start_val = (CMiniProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

