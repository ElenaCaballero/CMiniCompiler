
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 18 22:09:27 CST 2017
//----------------------------------------------------

package cminicompiler;

import java_cup.runtime.*;
import java.io.Reader;
import classes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 18 22:09:27 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\003\012\000\002\004\010\000\002\005\004" +
    "\000\002\005\003\000\002\006\012\000\002\010\005\000" +
    "\002\010\003\000\002\010\002\000\002\007\004\000\002" +
    "\012\004\000\002\012\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\014\005\000" +
    "\002\015\005\000\002\021\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\007\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\023\011\000\002\023\004" +
    "\000\002\024\006\000\002\024\004\000\002\025\005\000" +
    "\002\025\006\000\002\040\003\000\002\032\004\000\002" +
    "\032\004\000\002\026\011\000\002\027\015\000\002\030" +
    "\006\000\002\031\005\000\002\031\006\000\002\031\006" +
    "\000\002\017\011\000\002\020\007\000\002\020\011\000" +
    "\002\020\004\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\033\005\000" +
    "\002\033\003\000\002\034\005\000\002\034\003\000\002" +
    "\035\005\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\012\004\013\005\012\006\010\010\011\001" +
    "\002\000\004\002\000\001\002\000\006\037\231\043\021" +
    "\001\002\000\012\004\013\005\012\006\010\010\011\001" +
    "\002\000\004\002\016\001\002\000\006\037\uffc7\043\uffc7" +
    "\001\002\000\006\037\uffc6\043\uffc6\001\002\000\010\037" +
    "\uffca\043\uffca\045\015\001\002\000\010\037\uffcb\043\uffcb" +
    "\045\014\001\002\000\006\037\uffc9\043\uffc9\001\002\000" +
    "\006\037\uffc8\043\uffc8\001\002\000\004\002\001\001\002" +
    "\000\012\004\013\005\012\006\010\010\011\001\002\000" +
    "\004\043\021\001\002\000\004\020\022\001\002\000\014" +
    "\004\013\005\012\006\010\010\011\021\ufff7\001\002\000" +
    "\004\021\031\001\002\000\004\037\030\001\002\000\006" +
    "\017\026\021\ufff8\001\002\000\014\004\013\005\012\006" +
    "\010\010\011\021\ufff7\001\002\000\004\021\ufff9\001\002" +
    "\000\006\017\ufff6\021\ufff6\001\002\000\004\022\032\001" +
    "\002\000\040\003\054\004\013\005\012\006\010\010\011" +
    "\011\044\012\037\020\046\027\061\030\036\031\042\033" +
    "\041\034\051\037\045\042\057\001\002\000\042\003\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\020" +
    "\uffe5\023\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5" +
    "\037\uffe5\042\uffe5\001\002\000\042\003\uffee\004\uffee\005" +
    "\uffee\006\uffee\010\uffee\011\uffee\012\uffee\020\uffee\023\uffee" +
    "\027\uffee\030\uffee\031\uffee\033\uffee\034\uffee\037\uffee\042" +
    "\uffee\001\002\000\004\037\156\001\002\000\004\020\206" +
    "\001\002\000\004\020\200\001\002\000\044\003\uffef\004" +
    "\uffef\005\uffef\006\uffef\010\uffef\011\uffef\012\uffef\013\145" +
    "\020\uffef\023\uffef\027\uffef\030\uffef\031\uffef\033\uffef\034" +
    "\uffef\037\uffef\042\uffef\001\002\000\014\007\074\035\076" +
    "\036\077\037\073\042\072\001\002\000\004\020\170\001" +
    "\002\000\042\003\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\020\ufff3\023\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\033\ufff3\034\ufff3\037\ufff3\042\ufff3\001\002\000\004" +
    "\020\151\001\002\000\050\003\uffbf\004\uffbf\005\uffbf\006" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\020\uffbf" +
    "\021\uffbf\023\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034" +
    "\uffbf\037\uffbf\042\uffbf\001\002\000\010\020\046\037\045" +
    "\042\057\001\002\000\042\003\054\004\013\005\012\006" +
    "\010\010\011\011\044\012\037\020\046\023\ufff4\027\061" +
    "\030\036\031\042\033\041\034\051\037\045\042\057\001" +
    "\002\000\050\003\uffc2\004\uffc2\005\uffc2\006\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\020\uffc2\021\uffc2\023" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\037\uffc2" +
    "\042\uffc2\001\002\000\042\003\uffed\004\uffed\005\uffed\006" +
    "\uffed\010\uffed\011\uffed\012\uffed\020\uffed\023\uffed\027\uffed" +
    "\030\uffed\031\uffed\033\uffed\034\uffed\037\uffed\042\uffed\001" +
    "\002\000\050\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\140\020\uffc4\021\uffc4\023" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\037\uffc4" +
    "\042\uffc4\001\002\000\044\003\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\020\uffe6\023\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\133\033\uffe6\034\uffe6\037\uffe6\042" +
    "\uffe6\001\002\000\004\016\131\001\002\000\042\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4\020" +
    "\uffe4\023\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4" +
    "\037\uffe4\042\uffe4\001\002\000\042\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\020\ufff0\023\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0\037\ufff0\042" +
    "\ufff0\001\002\000\050\003\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\020\uffc0\021" +
    "\uffc0\023\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0" +
    "\037\uffc0\042\uffc0\001\002\000\042\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\010\ufff2\011\ufff2\012\ufff2\020\ufff2\023\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\037\ufff2\042" +
    "\ufff2\001\002\000\004\020\065\001\002\000\042\003\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\020" +
    "\ufff1\023\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1\034\ufff1" +
    "\037\ufff1\042\ufff1\001\002\000\004\023\064\001\002\000" +
    "\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe\001\002" +
    "\000\004\004\067\001\002\000\004\016\100\001\002\000" +
    "\004\037\070\001\002\000\004\024\071\001\002\000\014" +
    "\007\074\035\076\036\077\037\073\042\072\001\002\000" +
    "\016\015\uffcf\016\uffcf\017\uffcf\021\uffcf\025\uffcf\026\uffcf" +
    "\001\002\000\016\015\uffd0\016\uffd0\017\uffd0\021\uffd0\025" +
    "\uffd0\026\uffd0\001\002\000\016\015\uffce\016\uffce\017\uffce" +
    "\021\uffce\025\uffce\026\uffce\001\002\000\004\016\uffd8\001" +
    "\002\000\016\015\uffcc\016\uffcc\017\uffcc\021\uffcc\025\uffcc" +
    "\026\uffcc\001\002\000\016\015\uffcd\016\uffcd\017\uffcd\021" +
    "\uffcd\025\uffcd\026\uffcd\001\002\000\014\007\074\035\076" +
    "\036\077\037\073\042\072\001\002\000\004\015\122\001" +
    "\002\000\004\016\103\001\002\000\004\037\104\001\002" +
    "\000\006\013\113\014\112\001\002\000\004\021\106\001" +
    "\002\000\004\022\107\001\002\000\040\003\054\004\013" +
    "\005\012\006\010\010\011\011\044\012\037\020\046\027" +
    "\061\030\036\031\042\033\041\034\051\037\045\042\057" +
    "\001\002\000\004\023\111\001\002\000\042\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9\020\uffd9" +
    "\023\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\037" +
    "\uffd9\042\uffd9\001\002\000\004\024\117\001\002\000\006" +
    "\013\114\024\115\001\002\000\004\021\uffd7\001\002\000" +
    "\004\042\116\001\002\000\004\021\uffd6\001\002\000\004" +
    "\042\120\001\002\000\004\021\uffd5\001\002\000\014\007" +
    "\074\035\076\036\077\037\073\042\072\001\002\000\014" +
    "\007\uffdd\035\uffdd\036\uffdd\037\uffdd\042\uffdd\001\002\000" +
    "\012\016\uffdf\021\uffdf\025\126\026\124\001\002\000\014" +
    "\007\074\035\076\036\077\037\073\042\072\001\002\000" +
    "\006\016\uffde\021\uffde\001\002\000\014\007\074\035\076" +
    "\036\077\037\073\042\072\001\002\000\006\016\uffdb\021" +
    "\uffdb\001\002\000\006\016\uffdc\021\uffdc\001\002\000\042" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\020\uffd1\023\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1" +
    "\034\uffd1\037\uffd1\042\uffd1\001\002\000\044\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\020\uffe2" +
    "\023\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\037\uffe2\042\uffe2\001\002\000\006\022\135\031\042" +
    "\001\002\000\044\003\uffe0\004\uffe0\005\uffe0\006\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\020\uffe0\023\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\133\033\uffe0\034\uffe0\037\uffe0\042\uffe0\001" +
    "\002\000\040\003\054\004\013\005\012\006\010\010\011" +
    "\011\044\012\037\020\046\027\061\030\036\031\042\033" +
    "\041\034\051\037\045\042\057\001\002\000\004\023\137" +
    "\001\002\000\044\003\uffe1\004\uffe1\005\uffe1\006\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\020\uffe1\023\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\037\uffe1\042\uffe1\001" +
    "\002\000\010\020\uffbd\037\uffbd\042\uffbd\001\002\000\010" +
    "\020\046\037\045\042\057\001\002\000\050\003\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\020\uffc3\021\uffc3\023\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\037\uffc3\042\uffc3\001\002\000\004" +
    "\023\ufff5\001\002\000\006\013\145\021\147\001\002\000" +
    "\010\020\uffbe\037\uffbe\042\uffbe\001\002\000\010\020\046" +
    "\037\045\042\057\001\002\000\050\003\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\020\uffc1\021\uffc1\023\uffc1\027\uffc1\030\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\037\uffc1\042\uffc1\001\002\000\050\003\uffc5" +
    "\004\uffc5\005\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\140\020\uffc5\021\uffc5\023\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\033\uffc5\034\uffc5\037\uffc5\042\uffc5\001\002\000" +
    "\004\046\152\001\002\000\006\017\153\021\154\001\002" +
    "\000\004\037\156\001\002\000\004\016\155\001\002\000" +
    "\042\003\uffd3\004\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\020\uffd3\023\uffd3\027\uffd3\030\uffd3\031\uffd3\033" +
    "\uffd3\034\uffd3\037\uffd3\042\uffd3\001\002\000\012\016\uffea" +
    "\017\162\021\uffea\024\163\001\002\000\004\021\160\001" +
    "\002\000\004\016\161\001\002\000\042\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2\020\uffd2\023" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\037\uffd2" +
    "\042\uffd2\001\002\000\004\037\156\001\002\000\014\007" +
    "\074\035\076\036\077\037\073\042\072\001\002\000\010" +
    "\016\uffe8\017\165\021\uffe8\001\002\000\004\037\156\001" +
    "\002\000\006\016\uffe7\021\uffe7\001\002\000\006\016\uffe9" +
    "\021\uffe9\001\002\000\014\007\074\035\076\036\077\037" +
    "\073\042\072\001\002\000\004\021\172\001\002\000\004" +
    "\022\173\001\002\000\040\003\054\004\013\005\012\006" +
    "\010\010\011\011\044\012\037\020\046\027\061\030\036" +
    "\031\042\033\041\034\051\037\045\042\057\001\002\000" +
    "\004\023\175\001\002\000\044\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\010\uffe3\011\uffe3\012\uffe3\020\uffe3\023\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\037\uffe3" +
    "\042\uffe3\001\002\000\004\016\177\001\002\000\042\003" +
    "\uffec\004\uffec\005\uffec\006\uffec\010\uffec\011\uffec\012\uffec" +
    "\020\uffec\023\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034" +
    "\uffec\037\uffec\042\uffec\001\002\000\004\046\201\001\002" +
    "\000\004\017\202\001\002\000\004\037\156\001\002\000" +
    "\004\021\204\001\002\000\004\016\205\001\002\000\042" +
    "\003\uffd4\004\uffd4\005\uffd4\006\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\020\uffd4\023\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4" +
    "\034\uffd4\037\uffd4\042\uffd4\001\002\000\014\007\074\035" +
    "\076\036\077\037\073\042\072\001\002\000\004\021\210" +
    "\001\002\000\004\022\211\001\002\000\040\003\054\004" +
    "\013\005\012\006\010\010\011\011\044\012\037\020\046" +
    "\027\061\030\036\031\042\033\041\034\051\037\045\042" +
    "\057\001\002\000\004\023\213\001\002\000\042\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda\012\uffda\020" +
    "\uffda\023\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034\uffda" +
    "\037\uffda\042\uffda\001\002\000\004\016\215\001\002\000" +
    "\042\003\uffeb\004\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\020\uffeb\023\uffeb\027\uffeb\030\uffeb\031\uffeb\033" +
    "\uffeb\034\uffeb\037\uffeb\042\uffeb\001\002\000\014\002\ufffb" +
    "\004\013\005\012\006\010\010\011\001\002\000\004\002" +
    "\uffff\001\002\000\004\037\221\001\002\000\004\020\222" +
    "\001\002\000\014\004\013\005\012\006\010\010\011\021" +
    "\ufff7\001\002\000\004\021\224\001\002\000\004\022\225" +
    "\001\002\000\040\003\054\004\013\005\012\006\010\010" +
    "\011\011\044\012\037\020\046\027\061\030\036\031\042" +
    "\033\041\034\051\037\045\042\057\001\002\000\004\023" +
    "\227\001\002\000\014\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\010\ufffa\001\002\000\004\002\ufffc\001\002\000\004\020" +
    "\232\001\002\000\014\004\013\005\012\006\010\010\011" +
    "\021\ufff7\001\002\000\004\021\234\001\002\000\004\016" +
    "\235\001\002\000\012\004\ufffd\005\ufffd\006\ufffd\010\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\012\002\006\003\003\004\005\013\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\016" +
    "\013\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\216\006\215\013\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\024\010\022\013\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\024\010\026\013\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\011\046\012\062" +
    "\013\034\014\033\015\042\016\057\017\061\020\055\023" +
    "\052\026\032\027\054\033\037\034\051\035\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\145" +
    "\001\001\000\004\022\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\143\034\051\035\047\001\001\000\036\011\046\012" +
    "\142\013\034\014\033\015\042\016\057\017\061\020\055" +
    "\023\052\026\032\027\054\033\037\034\051\035\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\140" +
    "\001\001\000\004\024\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\100\025\101\001\001\000\004\040\120" +
    "\001\001\000\002\001\001\000\004\031\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\011\046\012\107\013\034\014\033\015\042\016\057\017" +
    "\061\020\055\023\052\026\032\027\054\033\037\034\051" +
    "\035\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\122\001\001\000\002\001\001\000\004" +
    "\032\124\001\001\000\006\022\100\025\127\001\001\000" +
    "\002\001\001\000\006\022\100\025\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\133\001\001\000\004\024\131\001\001" +
    "\000\036\011\046\012\135\013\034\014\033\015\042\016" +
    "\057\017\061\020\055\023\052\026\032\027\054\033\037" +
    "\034\051\035\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\145\001\001\000" +
    "\002\001\001\000\006\034\147\035\047\001\001\000\002" +
    "\001\001\000\004\037\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\166\001\001" +
    "\000\004\022\163\001\001\000\002\001\001\000\004\021" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\100\025\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\011\046\012\173\013\034\014\033\015\042" +
    "\016\057\017\061\020\055\023\052\026\032\027\054\033" +
    "\037\034\051\035\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\100\025\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\011\046\012\211\013\034\014\033\015\042\016" +
    "\057\017\061\020\055\023\052\026\032\027\054\033\037" +
    "\034\051\035\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\227" +
    "\006\215\013\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\024\010\222\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\011" +
    "\046\012\225\013\034\014\033\015\042\016\057\017\061" +
    "\020\055\023\052\026\032\027\054\033\037\034\051\035" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\024\010\232\013" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public CMiniProgram root = null;

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Syntax Error");
                System.err.println("INFO "+ info.toString());
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
                        System.err.println("Value "+ s.right);
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		//System.exit(1);
	}

	


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opmult ::= ARTHMEXPMULT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (op == "*") {
					RESULT = "*";
				}else if (op == "/") {
					RESULT = "/";
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmult",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opsum ::= ARTHMEXPSUM 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (op == "+") {
					RESULT = "+";
				}else if (op == "-") {
					RESULT = "-";
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsum",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= ID 
            {
              Factor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//conseguir el valor del id, validar que es un int
				Factor r = new Factor((String)id);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= INTEGER 
            {
              Factor RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Factor r = new Factor((int)num);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= LEFTPRNTH arithmeticExp RIGHTPRNTH 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				Factor r = new Factor(e);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Term r = new Term(f);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= term opmult factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opmultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opmult = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (opmult == "*") {
					Term r = new Term(t, "*", f);
					RESULT = r;
				}else if (opmult == "/") {
					Term r = new Term(t, "/", f);
					RESULT = r;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arithmeticExp ::= term 
            {
              ArithmeticExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ArithmeticExp r = new ArithmeticExp(t);
						RESULT = r;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arithmeticExp ::= arithmeticExp opsum term 
            {
              ArithmeticExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArithmeticExp e = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opsumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opsum = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if (opsum == "+") {
							ArithmeticExp r = new ArithmeticExp(e, "+", t);
							RESULT = r;
						}else if (opsum == "-") {
							ArithmeticExp r = new ArithmeticExp(e, "-", t);
							RESULT = r;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Type r = new Type((String)v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Type r = new Type((String)b);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= CHAR ASTERISK 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Type r = new Type((String)c, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= INT ASTERISK 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Type r = new Type((String)i, (String)a);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CHAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Type r = new Type((String)c);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Type r = new Type((String)i);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= NULL 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)n, "null");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= BOOLTOF 
            {
              Value RESULT =null;
		int tFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)tF, "bool");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= CONSTCHAR 
            {
              Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object character = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)character, "char");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= INTEGER 
            {
              Value RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)num, "int");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Value((String)id, "id");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // printers ::= error SEMICOLON 
            {
              Printers RESULT =null;
		
				RESULT = new Printers();
				System.err.println("Error at declaration line: Possible missing ; at the end of a declaration line.");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // printers ::= PRINTF LEFTPRNTH CONSTSTR COMMA variables RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Printers r= new Printers((String)pf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printers ::= PRINTF LEFTPRNTH CONSTSTR RIGHTPRNTH SEMICOLON 
            {
              Printers RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Printers r = new Printers((String)pf,sl);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // scanners ::= SCANF LEFTPRNTH CONSTSTR COMMA variables RIGHTPRNTH SEMICOLON 
            {
              Scanners RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Scanners r= new Scanners((String)sf,sl,v);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanners",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // forArthmExp ::= ID ARTHMEXPMULT EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // forArthmExp ::= ID ARTHMEXPSUM EQUALS INTEGER 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aESleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aESright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aES = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES, (String)eq, (int)num);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // forArthmExp ::= ID ARTHMEXPSUM ARTHMEXPSUM 
            {
              ForArthmExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aES1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aES1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object aES1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aES2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aES2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aES2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ForArthmExp r = new ForArthmExp((String)id, (String)aES1, (String)aES2);
				if(aES1 != aES2){
					System.err.println("error");// REVISAR COMO TIRAR ERRORES SIN QUE QUIEBRE
				}
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forArthmExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inits ::= INT ID EQUALS value 
            {
              Inits RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Inits r = new Inits((String)i, (String)id,v);
			RESULT = r;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inits",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // forStatement ::= FOR LEFTPRNTH inits SEMICOLON condition SEMICOLON forArthmExp RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              ForStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Inits i = (Inits)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ForArthmExp aE = (ForArthmExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					ForStatement r = new ForStatement((String)f, i, c, aE, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // whileStatement ::= WHILE LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              WhileStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					WhileStatement r = new WhileStatement((String)w, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStatement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // andOr ::= OR condition 
            {
              AndOR RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)o,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // andOr ::= AND condition 
            {
              AndOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = new AndOR((String)a,c);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andOr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operators ::= BOOLEXP 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (b == "<") {
					RESULT = "<";
				}else if (b == ">") {
					RESULT = ">";
				}else if (b == "<=") {
					RESULT = "<=";
				}else if (b == ">=") {
					RESULT = ">=";
				}else if (b == "!=") {
					RESULT = "!=";
				}else if (b == "==") {
					RESULT = "==";
				}else{
					System.err.println("Error");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condition ::= value operators value andOr 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndOR aO = (AndOR)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2,aO);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition ::= value operators value 
            {
              Condition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Condition r = new Condition(v1,(String)b,v2);
				RESULT = r;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elseStatement ::= ELSE ifStatement 
            {
              ElseStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifS = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ElseStatement r = new ElseStatement((String)e, ifS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elseStatement ::= ELSE LEFTCBRAC expressions RIGHTCBRAC 
            {
              ElseStatement RESULT =null;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					ElseStatement r = new ElseStatement((String)eS, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ifStatement ::= ifStatement elseStatement 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatement i = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseStatement eS = (ElseStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					IfStatement r = new IfStatement(i, eS);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ifStatement ::= IF LEFTPRNTH condition RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					IfStatement r = new IfStatement((String)i, c, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements ::= forStatement 
            {
              Statements RESULT =null;
		int fSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStatement fS = (ForStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(fS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= whileStatement 
            {
              Statements RESULT =null;
		int wSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatement wS = (WhileStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Statements r = new Statements(wS);
					RESULT = r; 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= ifStatement 
            {
              Statements RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatement ifs = (IfStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					Statements r = new Statements(ifs);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variables ::= ID EQUALS value COMMA variables 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			  		Variables r = new Variables((String)id, val, v);
			  		RESULT = r;
		  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variables ::= ID EQUALS value 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  			Variables r = new Variables((String)id, val);
		  			RESULT = r;
		  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= ID COMMA variables 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  			Variables r = new Variables((String)id, v);
		  			RESULT = r;
		  		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= ID 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Variables r = new Variables((String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variableDeclaration ::= type variables SEMICOLON 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							VariableDeclaration r = new VariableDeclaration(t, v);
							RESULT = r;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // returnStatement ::= RETURN value SEMICOLON 
            {
              ReturnStatement RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						ReturnStatement r = new ReturnStatement((String)ret, val);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStatement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= BREAK 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression((String)b);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= returnStatement 
            {
              Expression RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(rs);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= arithmeticExp 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExp a = (ArithmeticExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= printers 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printers p = (Printers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(p);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= scanners 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Scanners s = (Scanners)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= statements 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(s);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= variableDeclaration 
            {
              Expression RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expression r = new Expression(vd);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressions ::= expression 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressions ::= expression expressions 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Expressions r = new Expressions(es, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argument ::= type ID 
            {
              Argument RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Argument r = new Argument(t, (String)id);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argumentList ::= 
            {
              ArgumentList RESULT =null;
		
					RESULT = null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // argumentList ::= argument 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argumentList ::= argument COMMA argumentList 
            {
              ArgumentList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgumentList al = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ArgumentList r = new ArgumentList(al, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= type ID LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Function r = new Function(t, (String)id, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionList ::= function 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(f);
					RESULT = r; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionList ::= function functionList 
            {
              FunctionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					FunctionList r = new FunctionList(fl, f);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functionDeclaration ::= type ID LEFTPRNTH argumentList RIGHTPRNTH SEMICOLON 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					FunctionDeclaration r = new FunctionDeclaration(t, (String)id, a);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainClause ::= type MAIN LEFTPRNTH argumentList RIGHTPRNTH LEFTCBRAC expressions RIGHTCBRAC 
            {
              MainClause RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArgumentList a = (ArgumentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expressions e = (Expressions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					MainClause r = new MainClause(t, (String)m, a, e);
					RESULT = r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cMiniProgram ::= functionDeclaration mainClause functionList 
            {
              CMiniProgram RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionList fl = (FunctionList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(fd, mc, fl);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cMiniProgram ::= mainClause 
            {
              CMiniProgram RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainClause mc = (MainClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					CMiniProgram r = new CMiniProgram(mc);
					RESULT = r;
					parser.root = RESULT;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cMiniProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cMiniProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CMiniProgram start_val = (CMiniProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

